// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module colordetect_accel_xFInRange_9_0_2160_3840_15_0_1_9_1_3_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rgb2hsv_4100_dout,
        rgb2hsv_4100_empty_n,
        rgb2hsv_4100_read,
        imgHelper1_4101_din,
        imgHelper1_4101_full_n,
        imgHelper1_4101_write,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] rgb2hsv_4100_dout;
input   rgb2hsv_4100_empty_n;
output   rgb2hsv_4100_read;
output  [7:0] imgHelper1_4101_din;
input   imgHelper1_4101_full_n;
output   imgHelper1_4101_write;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
input  [7:0] p_read7;
input  [7:0] p_read8;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
input  [7:0] p_read16;
input  [7:0] p_read17;
input  [15:0] p_read18;
input  [15:0] p_read19;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rgb2hsv_4100_read;
reg imgHelper1_4101_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    rgb2hsv_4100_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln92_reg_705;
reg    imgHelper1_4101_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln92_reg_705_pp0_iter1_reg;
reg   [31:0] indvar_flatten_reg_229;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_589_p2;
reg   [31:0] bound_reg_695;
wire   [31:0] add_ln92_fu_248_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln92_fu_254_p2;
wire   [0:0] and_ln1348_1_fu_373_p2;
reg   [0:0] and_ln1348_1_reg_709;
wire   [0:0] and_ln1348_3_fu_469_p2;
reg   [0:0] and_ln1348_3_reg_714;
wire   [0:0] and_ln1348_5_fu_565_p2;
reg   [0:0] and_ln1348_5_reg_719;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_val1_V_fu_259_p1;
wire   [0:0] icmp_ln56_fu_283_p2;
wire   [0:0] icmp_ln56_1_fu_294_p2;
wire   [7:0] tmp_val1_V_1_fu_263_p4;
wire   [0:0] icmp_ln890_fu_305_p2;
wire   [0:0] icmp_ln56_2_fu_316_p2;
wire   [7:0] tmp_val1_V_2_fu_273_p4;
wire   [0:0] icmp_ln890_1_fu_327_p2;
wire   [0:0] icmp_ln56_3_fu_338_p2;
wire   [0:0] xor_ln56_2_fu_321_p2;
wire   [0:0] xor_ln56_fu_288_p2;
wire   [0:0] and_ln1348_fu_349_p2;
wire   [0:0] xor_ln890_fu_310_p2;
wire   [0:0] xor_ln56_3_fu_343_p2;
wire   [0:0] xor_ln890_1_fu_332_p2;
wire   [0:0] and_ln1348_4_fu_361_p2;
wire   [0:0] xor_ln56_1_fu_299_p2;
wire   [0:0] and_ln1348_6_fu_367_p2;
wire   [0:0] and_ln1348_2_fu_355_p2;
wire   [0:0] icmp_ln56_4_fu_379_p2;
wire   [0:0] icmp_ln56_5_fu_390_p2;
wire   [0:0] icmp_ln890_2_fu_401_p2;
wire   [0:0] icmp_ln56_6_fu_412_p2;
wire   [0:0] icmp_ln890_3_fu_423_p2;
wire   [0:0] icmp_ln56_7_fu_434_p2;
wire   [0:0] xor_ln56_6_fu_417_p2;
wire   [0:0] xor_ln56_4_fu_384_p2;
wire   [0:0] and_ln1348_7_fu_445_p2;
wire   [0:0] xor_ln890_2_fu_406_p2;
wire   [0:0] xor_ln56_7_fu_439_p2;
wire   [0:0] xor_ln890_3_fu_428_p2;
wire   [0:0] and_ln1348_9_fu_457_p2;
wire   [0:0] xor_ln56_5_fu_395_p2;
wire   [0:0] and_ln1348_10_fu_463_p2;
wire   [0:0] and_ln1348_8_fu_451_p2;
wire   [0:0] icmp_ln56_8_fu_475_p2;
wire   [0:0] icmp_ln56_9_fu_486_p2;
wire   [0:0] icmp_ln890_4_fu_497_p2;
wire   [0:0] icmp_ln56_10_fu_508_p2;
wire   [0:0] icmp_ln890_5_fu_519_p2;
wire   [0:0] icmp_ln56_11_fu_530_p2;
wire   [0:0] xor_ln56_10_fu_513_p2;
wire   [0:0] xor_ln56_8_fu_480_p2;
wire   [0:0] and_ln1348_11_fu_541_p2;
wire   [0:0] xor_ln890_4_fu_502_p2;
wire   [0:0] xor_ln56_11_fu_535_p2;
wire   [0:0] xor_ln890_5_fu_524_p2;
wire   [0:0] and_ln1348_13_fu_553_p2;
wire   [0:0] xor_ln56_9_fu_491_p2;
wire   [0:0] and_ln1348_14_fu_559_p2;
wire   [0:0] and_ln1348_12_fu_547_p2;
wire   [0:0] or_ln1349_fu_571_p2;
wire   [0:0] or_ln1349_1_fu_575_p2;
wire   [15:0] grp_fu_589_p0;
wire   [15:0] grp_fu_589_p1;
reg    grp_fu_589_ce;
wire    ap_CS_fsm_state8;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_589_p00;
wire   [31:0] grp_fu_589_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

colordetect_accel_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_589_p0),
    .din1(grp_fu_589_p1),
    .ce(grp_fu_589_ce),
    .dout(grp_fu_589_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln92_fu_254_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_229 <= add_ln92_fu_248_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_229 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_705 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln1348_1_reg_709 <= and_ln1348_1_fu_373_p2;
        and_ln1348_3_reg_714 <= and_ln1348_3_fu_469_p2;
        and_ln1348_5_reg_719 <= and_ln1348_5_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_695 <= grp_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln92_reg_705 <= icmp_ln92_fu_254_p2;
        icmp_ln92_reg_705_pp0_iter1_reg <= icmp_ln92_reg_705;
    end
end

always @ (*) begin
    if ((icmp_ln92_fu_254_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_589_ce = 1'b0;
    end else begin
        grp_fu_589_ce = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_705_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        imgHelper1_4101_blk_n = imgHelper1_4101_full_n;
    end else begin
        imgHelper1_4101_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_705_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imgHelper1_4101_write = 1'b1;
    end else begin
        imgHelper1_4101_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_705 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb2hsv_4100_blk_n = rgb2hsv_4100_empty_n;
    end else begin
        rgb2hsv_4100_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_705 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb2hsv_4100_read = 1'b1;
    end else begin
        rgb2hsv_4100_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln92_fu_254_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln92_fu_254_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln92_fu_248_p2 = (indvar_flatten_reg_229 + 32'd1);

assign and_ln1348_10_fu_463_p2 = (xor_ln56_5_fu_395_p2 & and_ln1348_9_fu_457_p2);

assign and_ln1348_11_fu_541_p2 = (xor_ln56_8_fu_480_p2 & xor_ln56_10_fu_513_p2);

assign and_ln1348_12_fu_547_p2 = (xor_ln890_4_fu_502_p2 & and_ln1348_11_fu_541_p2);

assign and_ln1348_13_fu_553_p2 = (xor_ln890_5_fu_524_p2 & xor_ln56_11_fu_535_p2);

assign and_ln1348_14_fu_559_p2 = (xor_ln56_9_fu_491_p2 & and_ln1348_13_fu_553_p2);

assign and_ln1348_1_fu_373_p2 = (and_ln1348_6_fu_367_p2 & and_ln1348_2_fu_355_p2);

assign and_ln1348_2_fu_355_p2 = (xor_ln890_fu_310_p2 & and_ln1348_fu_349_p2);

assign and_ln1348_3_fu_469_p2 = (and_ln1348_8_fu_451_p2 & and_ln1348_10_fu_463_p2);

assign and_ln1348_4_fu_361_p2 = (xor_ln890_1_fu_332_p2 & xor_ln56_3_fu_343_p2);

assign and_ln1348_5_fu_565_p2 = (and_ln1348_14_fu_559_p2 & and_ln1348_12_fu_547_p2);

assign and_ln1348_6_fu_367_p2 = (xor_ln56_1_fu_299_p2 & and_ln1348_4_fu_361_p2);

assign and_ln1348_7_fu_445_p2 = (xor_ln56_6_fu_417_p2 & xor_ln56_4_fu_384_p2);

assign and_ln1348_8_fu_451_p2 = (xor_ln890_2_fu_406_p2 & and_ln1348_7_fu_445_p2);

assign and_ln1348_9_fu_457_p2 = (xor_ln890_3_fu_428_p2 & xor_ln56_7_fu_439_p2);

assign and_ln1348_fu_349_p2 = (xor_ln56_fu_288_p2 & xor_ln56_2_fu_321_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln92_reg_705_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (imgHelper1_4101_full_n == 1'b0)) | ((icmp_ln92_reg_705 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rgb2hsv_4100_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln92_reg_705_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (imgHelper1_4101_full_n == 1'b0)) | ((icmp_ln92_reg_705 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rgb2hsv_4100_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln92_reg_705_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (imgHelper1_4101_full_n == 1'b0)) | ((icmp_ln92_reg_705 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rgb2hsv_4100_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((icmp_ln92_reg_705 == 1'd0) & (rgb2hsv_4100_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter2 = ((icmp_ln92_reg_705_pp0_iter1_reg == 1'd0) & (imgHelper1_4101_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_589_p0 = grp_fu_589_p00;

assign grp_fu_589_p00 = p_read18;

assign grp_fu_589_p1 = grp_fu_589_p10;

assign grp_fu_589_p10 = p_read19;

assign icmp_ln56_10_fu_508_p2 = ((tmp_val1_V_1_fu_263_p4 < p_read7) ? 1'b1 : 1'b0);

assign icmp_ln56_11_fu_530_p2 = ((tmp_val1_V_2_fu_273_p4 < p_read8) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_294_p2 = ((p_read9 < tmp_val1_V_fu_259_p1) ? 1'b1 : 1'b0);

assign icmp_ln56_2_fu_316_p2 = ((tmp_val1_V_1_fu_263_p4 < p_read1) ? 1'b1 : 1'b0);

assign icmp_ln56_3_fu_338_p2 = ((tmp_val1_V_2_fu_273_p4 < p_read2) ? 1'b1 : 1'b0);

assign icmp_ln56_4_fu_379_p2 = ((tmp_val1_V_fu_259_p1 < p_read3) ? 1'b1 : 1'b0);

assign icmp_ln56_5_fu_390_p2 = ((p_read12 < tmp_val1_V_fu_259_p1) ? 1'b1 : 1'b0);

assign icmp_ln56_6_fu_412_p2 = ((tmp_val1_V_1_fu_263_p4 < p_read4) ? 1'b1 : 1'b0);

assign icmp_ln56_7_fu_434_p2 = ((tmp_val1_V_2_fu_273_p4 < p_read5) ? 1'b1 : 1'b0);

assign icmp_ln56_8_fu_475_p2 = ((tmp_val1_V_fu_259_p1 < p_read6) ? 1'b1 : 1'b0);

assign icmp_ln56_9_fu_486_p2 = ((p_read15 < tmp_val1_V_fu_259_p1) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_283_p2 = ((tmp_val1_V_fu_259_p1 < p_read) ? 1'b1 : 1'b0);

assign icmp_ln890_1_fu_327_p2 = ((p_read11 < tmp_val1_V_2_fu_273_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_2_fu_401_p2 = ((p_read13 < tmp_val1_V_1_fu_263_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_3_fu_423_p2 = ((p_read14 < tmp_val1_V_2_fu_273_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_4_fu_497_p2 = ((p_read16 < tmp_val1_V_1_fu_263_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_5_fu_519_p2 = ((p_read17 < tmp_val1_V_2_fu_273_p4) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_305_p2 = ((p_read10 < tmp_val1_V_1_fu_263_p4) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_254_p2 = ((indvar_flatten_reg_229 == bound_reg_695) ? 1'b1 : 1'b0);

assign imgHelper1_4101_din = ((or_ln1349_1_fu_575_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign or_ln1349_1_fu_575_p2 = (or_ln1349_fu_571_p2 | and_ln1348_3_reg_714);

assign or_ln1349_fu_571_p2 = (and_ln1348_5_reg_719 | and_ln1348_1_reg_709);

assign tmp_val1_V_1_fu_263_p4 = {{rgb2hsv_4100_dout[15:8]}};

assign tmp_val1_V_2_fu_273_p4 = {{rgb2hsv_4100_dout[23:16]}};

assign tmp_val1_V_fu_259_p1 = rgb2hsv_4100_dout[7:0];

assign xor_ln56_10_fu_513_p2 = (icmp_ln56_10_fu_508_p2 ^ 1'd1);

assign xor_ln56_11_fu_535_p2 = (icmp_ln56_11_fu_530_p2 ^ 1'd1);

assign xor_ln56_1_fu_299_p2 = (icmp_ln56_1_fu_294_p2 ^ 1'd1);

assign xor_ln56_2_fu_321_p2 = (icmp_ln56_2_fu_316_p2 ^ 1'd1);

assign xor_ln56_3_fu_343_p2 = (icmp_ln56_3_fu_338_p2 ^ 1'd1);

assign xor_ln56_4_fu_384_p2 = (icmp_ln56_4_fu_379_p2 ^ 1'd1);

assign xor_ln56_5_fu_395_p2 = (icmp_ln56_5_fu_390_p2 ^ 1'd1);

assign xor_ln56_6_fu_417_p2 = (icmp_ln56_6_fu_412_p2 ^ 1'd1);

assign xor_ln56_7_fu_439_p2 = (icmp_ln56_7_fu_434_p2 ^ 1'd1);

assign xor_ln56_8_fu_480_p2 = (icmp_ln56_8_fu_475_p2 ^ 1'd1);

assign xor_ln56_9_fu_491_p2 = (icmp_ln56_9_fu_486_p2 ^ 1'd1);

assign xor_ln56_fu_288_p2 = (icmp_ln56_fu_283_p2 ^ 1'd1);

assign xor_ln890_1_fu_332_p2 = (icmp_ln890_1_fu_327_p2 ^ 1'd1);

assign xor_ln890_2_fu_406_p2 = (icmp_ln890_2_fu_401_p2 ^ 1'd1);

assign xor_ln890_3_fu_428_p2 = (icmp_ln890_3_fu_423_p2 ^ 1'd1);

assign xor_ln890_4_fu_502_p2 = (icmp_ln890_4_fu_497_p2 ^ 1'd1);

assign xor_ln890_5_fu_524_p2 = (icmp_ln890_5_fu_519_p2 ^ 1'd1);

assign xor_ln890_fu_310_p2 = (icmp_ln890_fu_305_p2 ^ 1'd1);

endmodule //colordetect_accel_xFInRange_9_0_2160_3840_15_0_1_9_1_3_s
