// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module colordetect_accel_Block_split5_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        t1_dout,
        t1_empty_n,
        t1_read,
        low_t_address0,
        low_t_ce0,
        low_t_q0,
        high_t_address0,
        high_t_ce0,
        high_t_q0,
        t2,
        t2_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] t1_dout;
input   t1_empty_n;
output   t1_read;
output  [3:0] low_t_address0;
output   low_t_ce0;
input  [7:0] low_t_q0;
output  [3:0] high_t_address0;
output   high_t_ce0;
input  [7:0] high_t_q0;
output  [31:0] t2;
output   t2_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg t1_read;
reg low_t_ce0;
reg high_t_ce0;
reg[31:0] t2;
reg t2_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    t1_blk_n;
wire   [0:0] icmp_ln210_fu_69_p2;
reg   [0:0] icmp_ln210_reg_93;
wire   [63:0] idxprom21_i_fu_75_p1;
reg    ap_block_state1;
wire   [31:0] zext_ln213_fu_88_p1;
reg   [31:0] t2_preg;
wire    ap_CS_fsm_state2;
wire   [7:0] select_ln210_fu_81_p3;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 t2_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                t2_preg[0] <= 1'b0;
        t2_preg[1] <= 1'b0;
        t2_preg[2] <= 1'b0;
        t2_preg[3] <= 1'b0;
        t2_preg[4] <= 1'b0;
        t2_preg[5] <= 1'b0;
        t2_preg[6] <= 1'b0;
        t2_preg[7] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
                        t2_preg[7 : 0] <= zext_ln213_fu_88_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln210_reg_93 <= icmp_ln210_fu_69_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (t1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        high_t_ce0 = 1'b1;
    end else begin
        high_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (t1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        low_t_ce0 = 1'b1;
    end else begin
        low_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t1_blk_n = t1_empty_n;
    end else begin
        t1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (t1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t1_read = 1'b1;
    end else begin
        t1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        t2 = zext_ln213_fu_88_p1;
    end else begin
        t2 = t2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        t2_ap_vld = 1'b1;
    end else begin
        t2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (t1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (t1_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign high_t_address0 = idxprom21_i_fu_75_p1;

assign icmp_ln210_fu_69_p2 = (($signed(t1_dout) < $signed(32'd9)) ? 1'b1 : 1'b0);

assign idxprom21_i_fu_75_p1 = t1_dout;

assign low_t_address0 = idxprom21_i_fu_75_p1;

assign select_ln210_fu_81_p3 = ((icmp_ln210_reg_93[0:0] == 1'b1) ? low_t_q0 : high_t_q0);

assign zext_ln213_fu_88_p1 = select_ln210_fu_81_p3;

always @ (posedge ap_clk) begin
    t2_preg[31:8] <= 24'b000000000000000000000000;
end

endmodule //colordetect_accel_Block_split5_proc
