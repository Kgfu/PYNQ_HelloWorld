-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity colordetect_accel_bgr2hsv_9_2160_3840_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgInput_499_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    imgInput_499_empty_n : IN STD_LOGIC;
    imgInput_499_read : OUT STD_LOGIC;
    rgb2hsv_4100_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    rgb2hsv_4100_full_n : IN STD_LOGIC;
    rgb2hsv_4100_write : OUT STD_LOGIC;
    p_src_mat_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_mat_rows_empty_n : IN STD_LOGIC;
    p_src_mat_rows_read : OUT STD_LOGIC;
    p_src_mat_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_mat_cols_empty_n : IN STD_LOGIC;
    p_src_mat_cols_read : OUT STD_LOGIC );
end;


architecture behav of colordetect_accel_bgr2hsv_9_2160_3840_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv20_800 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_const_lv30_800 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal xf_cv_icvSaturate8u_cv_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce0 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce1 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce2 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce3 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_ce0 : STD_LOGIC;
    signal void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_ce0 : STD_LOGIC;
    signal void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput_499_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln128_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal rgb2hsv_4100_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal icmp_ln128_reg_673_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_mat_rows_blk_n : STD_LOGIC;
    signal p_src_mat_cols_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal rows_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln73_fu_235_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln73_reg_663 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln128_fu_241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln128_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_673_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_673_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_673_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_673_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_673_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_673_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_673_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_673_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal b_V_fu_252_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_677 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_677_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_677_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_677_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_684 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_684_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_684_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_684_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_690 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_690_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_690_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln123_fu_276_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln123_reg_696 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln123_reg_696_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln123_reg_696_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln123_reg_696_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1347_fu_279_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1347_reg_703 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1347_reg_703_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1347_reg_703_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1347_reg_703_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal xf_cv_icvSaturate8u_cv_load_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal xf_cv_icvSaturate8u_cv_load_reg_719_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_load_2_reg_725 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln123_1_fu_324_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln123_1_reg_730 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1347_1_fu_328_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1347_1_reg_735 : STD_LOGIC_VECTOR (9 downto 0);
    signal vmin_V_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal vmin_V_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal vmin_V_reg_745_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_1_fu_356_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_1_reg_750 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_1_reg_750_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal xf_cv_icvSaturate8u_cv_load_3_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal add_ln213_1_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln213_1_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln213_1_reg_766_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln213_1_reg_766_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln213_1_reg_766_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln213_1_reg_766_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal vr_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vr_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal vg_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vg_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_22_fu_449_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_22_reg_799 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln157_2_fu_559_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal and_ln157_2_reg_804 : STD_LOGIC_VECTOR (12 downto 0);
    signal op_assign_1_reg_819 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal zext_ln534_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_7_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln534_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_8_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_9_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln73_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln73_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1347_fu_282_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1346_fu_288_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_26_fu_299_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_17_fu_305_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln147_fu_316_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal v_3_fu_319_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_25_fu_331_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_fu_337_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_fu_352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_27_fu_359_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_19_fu_365_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln148_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln213_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln870_fu_400_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln213_fu_414_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal diff_V_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_28_fu_445_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln126_fu_423_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln157_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_23_fu_468_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_476_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln157_fu_484_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln157_fu_472_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln157_fu_488_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln126_1_fu_430_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln157_fu_494_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln157_1_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_24_fu_517_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln157_1_fu_525_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln157_1_fu_533_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln157_2_fu_521_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln157_1_fu_537_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1347_1_fu_509_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln157_1_fu_543_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln157_3_fu_549_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln157_1_fu_500_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln157_2_fu_553_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1347_fu_460_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln158_fu_576_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_632_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_641_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_593_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln159_fu_609_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln159_1_fu_600_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln161_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_632_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_632_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_632_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_641_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_641_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_632_ce : STD_LOGIC;
    signal grp_fu_641_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_632_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_641_p20 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln73_fu_235_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln73_fu_235_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component colordetect_accel_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component colordetect_accel_mac_muladd_20s_8ns_13ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component colordetect_accel_ama_addmuladd_13s_9s_17ns_13ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        din3 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component colordetect_accel_bgr2hsv_9_2160_3840_1_s_xf_cv_icvSaturate8u_cv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component colordetect_accel_bgr2hsv_9_2160_3840_1_s_void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component colordetect_accel_bgr2hsv_9_2160_3840_1_s_void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    xf_cv_icvSaturate8u_cv_U : component colordetect_accel_bgr2hsv_9_2160_3840_1_s_xf_cv_icvSaturate8u_cv
    generic map (
        DataWidth => 8,
        AddressRange => 769,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xf_cv_icvSaturate8u_cv_address0,
        ce0 => xf_cv_icvSaturate8u_cv_ce0,
        q0 => xf_cv_icvSaturate8u_cv_q0,
        address1 => xf_cv_icvSaturate8u_cv_address1,
        ce1 => xf_cv_icvSaturate8u_cv_ce1,
        q1 => xf_cv_icvSaturate8u_cv_q1,
        address2 => xf_cv_icvSaturate8u_cv_address2,
        ce2 => xf_cv_icvSaturate8u_cv_ce2,
        q2 => xf_cv_icvSaturate8u_cv_q2,
        address3 => xf_cv_icvSaturate8u_cv_address3,
        ce3 => xf_cv_icvSaturate8u_cv_ce3,
        q3 => xf_cv_icvSaturate8u_cv_q3);

    void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_U : component colordetect_accel_bgr2hsv_9_2160_3840_1_s_void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_address0,
        ce0 => void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_ce0,
        q0 => void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_q0);

    void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_U : component colordetect_accel_bgr2hsv_9_2160_3840_1_s_void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_cud
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_address0,
        ce0 => void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_ce0,
        q0 => void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_q0);

    mul_32ns_32ns_64_1_1_U54 : component colordetect_accel_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln73_fu_235_p0,
        din1 => mul_ln73_fu_235_p1,
        dout => mul_ln73_fu_235_p2);

    mac_muladd_20s_8ns_13ns_20_4_1_U55 : component colordetect_accel_mac_muladd_20s_8ns_13ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 8,
        din2_WIDTH => 13,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_632_p0,
        din1 => grp_fu_632_p1,
        din2 => grp_fu_632_p2,
        ce => grp_fu_632_ce,
        dout => grp_fu_632_p3);

    ama_addmuladd_13s_9s_17ns_13ns_30_4_1_U56 : component colordetect_accel_ama_addmuladd_13s_9s_17ns_13ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 17,
        din3_WIDTH => 13,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln157_2_reg_804,
        din1 => ret_22_reg_799,
        din2 => grp_fu_641_p2,
        din3 => grp_fu_641_p3,
        ce => grp_fu_641_ce,
        dout => grp_fu_641_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln128_fu_247_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_218 <= add_ln128_fu_241_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_218 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln128_reg_673_pp0_iter4_reg = ap_const_lv1_0))) then
                add_ln213_1_reg_766 <= add_ln213_1_fu_390_p2;
                vg_reg_778 <= vg_fu_403_p2;
                vr_reg_772 <= vr_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln213_1_reg_766_pp0_iter6_reg <= add_ln213_1_reg_766;
                add_ln213_1_reg_766_pp0_iter7_reg <= add_ln213_1_reg_766_pp0_iter6_reg;
                add_ln213_1_reg_766_pp0_iter8_reg <= add_ln213_1_reg_766_pp0_iter7_reg;
                add_ln213_1_reg_766_pp0_iter9_reg <= add_ln213_1_reg_766_pp0_iter8_reg;
                b_V_reg_677_pp0_iter2_reg <= b_V_reg_677;
                b_V_reg_677_pp0_iter3_reg <= b_V_reg_677_pp0_iter2_reg;
                b_V_reg_677_pp0_iter4_reg <= b_V_reg_677_pp0_iter3_reg;
                g_V_reg_684_pp0_iter2_reg <= g_V_reg_684;
                g_V_reg_684_pp0_iter3_reg <= g_V_reg_684_pp0_iter2_reg;
                g_V_reg_684_pp0_iter4_reg <= g_V_reg_684_pp0_iter3_reg;
                icmp_ln128_reg_673_pp0_iter2_reg <= icmp_ln128_reg_673_pp0_iter1_reg;
                icmp_ln128_reg_673_pp0_iter3_reg <= icmp_ln128_reg_673_pp0_iter2_reg;
                icmp_ln128_reg_673_pp0_iter4_reg <= icmp_ln128_reg_673_pp0_iter3_reg;
                icmp_ln128_reg_673_pp0_iter5_reg <= icmp_ln128_reg_673_pp0_iter4_reg;
                icmp_ln128_reg_673_pp0_iter6_reg <= icmp_ln128_reg_673_pp0_iter5_reg;
                icmp_ln128_reg_673_pp0_iter7_reg <= icmp_ln128_reg_673_pp0_iter6_reg;
                icmp_ln128_reg_673_pp0_iter8_reg <= icmp_ln128_reg_673_pp0_iter7_reg;
                icmp_ln128_reg_673_pp0_iter9_reg <= icmp_ln128_reg_673_pp0_iter8_reg;
                r_V_reg_690_pp0_iter2_reg <= r_V_reg_690;
                r_V_reg_690_pp0_iter3_reg <= r_V_reg_690_pp0_iter2_reg;
                vmin_V_reg_745_pp0_iter5_reg <= vmin_V_reg_745;
                xf_cv_icvSaturate8u_cv_load_reg_719_pp0_iter4_reg <= xf_cv_icvSaturate8u_cv_load_reg_719;
                    zext_ln123_reg_696_pp0_iter3_reg(7 downto 0) <= zext_ln123_reg_696(7 downto 0);
                    zext_ln123_reg_696_pp0_iter4_reg(7 downto 0) <= zext_ln123_reg_696_pp0_iter3_reg(7 downto 0);
                    zext_ln123_reg_696_pp0_iter5_reg(7 downto 0) <= zext_ln123_reg_696_pp0_iter4_reg(7 downto 0);
                    zext_ln1347_reg_703_pp0_iter3_reg(7 downto 0) <= zext_ln1347_reg_703(7 downto 0);
                    zext_ln1347_reg_703_pp0_iter4_reg(7 downto 0) <= zext_ln1347_reg_703_pp0_iter3_reg(7 downto 0);
                    zext_ln1347_reg_703_pp0_iter5_reg(7 downto 0) <= zext_ln1347_reg_703_pp0_iter4_reg(7 downto 0);
                    zext_ln215_1_reg_750_pp0_iter5_reg(7 downto 0) <= zext_ln215_1_reg_750(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln128_reg_673_pp0_iter5_reg = ap_const_lv1_0))) then
                and_ln157_2_reg_804 <= and_ln157_2_fu_559_p2;
                ret_22_reg_799 <= ret_22_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                b_V_reg_677 <= b_V_fu_252_p1;
                g_V_reg_684 <= imgInput_499_dout(15 downto 8);
                r_V_reg_690 <= imgInput_499_dout(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cols_reg_658 <= p_src_mat_cols_dout;
                rows_reg_653 <= p_src_mat_rows_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln128_reg_673 <= icmp_ln128_fu_247_p2;
                icmp_ln128_reg_673_pp0_iter1_reg <= icmp_ln128_reg_673;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln73_reg_663 <= mul_ln73_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln128_reg_673_pp0_iter8_reg = ap_const_lv1_0))) then
                op_assign_1_reg_819 <= grp_fu_632_p3(19 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln128_reg_673_pp0_iter3_reg = ap_const_lv1_0))) then
                vmin_V_reg_745 <= vmin_V_fu_348_p2;
                    zext_ln123_1_reg_730(8 downto 0) <= zext_ln123_1_fu_324_p1(8 downto 0);
                    zext_ln1347_1_reg_735(7 downto 0) <= zext_ln1347_1_fu_328_p1(7 downto 0);
                    zext_ln215_1_reg_750(7 downto 0) <= zext_ln215_1_fu_356_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln128_reg_673_pp0_iter2_reg = ap_const_lv1_0))) then
                xf_cv_icvSaturate8u_cv_load_2_reg_725 <= xf_cv_icvSaturate8u_cv_q2;
                xf_cv_icvSaturate8u_cv_load_reg_719 <= xf_cv_icvSaturate8u_cv_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln128_reg_673_pp0_iter4_reg = ap_const_lv1_0))) then
                xf_cv_icvSaturate8u_cv_load_3_reg_761 <= xf_cv_icvSaturate8u_cv_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln128_reg_673_pp0_iter1_reg = ap_const_lv1_0))) then
                    zext_ln123_reg_696(7 downto 0) <= zext_ln123_fu_276_p1(7 downto 0);
                    zext_ln1347_reg_703(7 downto 0) <= zext_ln1347_fu_279_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln123_reg_696(8) <= '0';
    zext_ln123_reg_696_pp0_iter3_reg(8) <= '0';
    zext_ln123_reg_696_pp0_iter4_reg(8) <= '0';
    zext_ln123_reg_696_pp0_iter5_reg(8) <= '0';
    zext_ln1347_reg_703(8) <= '0';
    zext_ln1347_reg_703_pp0_iter3_reg(8) <= '0';
    zext_ln1347_reg_703_pp0_iter4_reg(8) <= '0';
    zext_ln1347_reg_703_pp0_iter5_reg(8) <= '0';
    zext_ln123_1_reg_730(9) <= '0';
    zext_ln1347_1_reg_735(9 downto 8) <= "00";
    zext_ln215_1_reg_750(8) <= '0';
    zext_ln215_1_reg_750_pp0_iter5_reg(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_mat_rows_empty_n, p_src_mat_cols_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, icmp_ln128_fu_247_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_src_mat_cols_empty_n = ap_const_logic_0) or (p_src_mat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln128_fu_247_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln128_fu_247_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln128_fu_241_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_218) + unsigned(ap_const_lv64_1));
    add_ln1346_fu_288_p2 <= std_logic_vector(unsigned(sub_ln1347_fu_282_p2) + unsigned(zext_ln1347_fu_279_p1));
    add_ln157_1_fu_537_p2 <= std_logic_vector(unsigned(zext_ln157_1_fu_533_p1) + unsigned(sext_ln157_2_fu_521_p1));
    add_ln157_2_fu_553_p2 <= std_logic_vector(signed(sext_ln157_3_fu_549_p1) + signed(sext_ln157_1_fu_500_p1));
    add_ln157_fu_488_p2 <= std_logic_vector(unsigned(zext_ln157_fu_484_p1) + unsigned(sext_ln157_fu_472_p1));
    add_ln161_fu_617_p2 <= std_logic_vector(unsigned(select_ln159_fu_609_p3) + unsigned(trunc_ln159_1_fu_600_p4));
    add_ln213_1_fu_390_p2 <= std_logic_vector(unsigned(add_ln213_fu_385_p2) + unsigned(xf_cv_icvSaturate8u_cv_load_reg_719_pp0_iter4_reg));
    add_ln213_fu_385_p2 <= std_logic_vector(unsigned(xf_cv_icvSaturate8u_cv_q1) + unsigned(b_V_reg_677_pp0_iter4_reg));
    and_ln157_1_fu_543_p2 <= (select_ln1347_1_fu_509_p3 and add_ln157_1_fu_537_p2);
    and_ln157_2_fu_559_p2 <= (select_ln1347_fu_460_p3 and add_ln157_2_fu_553_p2);
    and_ln157_fu_494_p2 <= (select_ln126_1_fu_430_p3 and add_ln157_fu_488_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(imgInput_499_empty_n, rgb2hsv_4100_full_n, ap_enable_reg_pp0_iter1, icmp_ln128_reg_673, ap_enable_reg_pp0_iter10, icmp_ln128_reg_673_pp0_iter9_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln128_reg_673_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (rgb2hsv_4100_full_n = ap_const_logic_0)) or ((icmp_ln128_reg_673 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (imgInput_499_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(imgInput_499_empty_n, rgb2hsv_4100_full_n, ap_enable_reg_pp0_iter1, icmp_ln128_reg_673, ap_enable_reg_pp0_iter10, icmp_ln128_reg_673_pp0_iter9_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln128_reg_673_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (rgb2hsv_4100_full_n = ap_const_logic_0)) or ((icmp_ln128_reg_673 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (imgInput_499_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(imgInput_499_empty_n, rgb2hsv_4100_full_n, ap_enable_reg_pp0_iter1, icmp_ln128_reg_673, ap_enable_reg_pp0_iter10, icmp_ln128_reg_673_pp0_iter9_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln128_reg_673_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (rgb2hsv_4100_full_n = ap_const_logic_0)) or ((icmp_ln128_reg_673 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (imgInput_499_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_mat_rows_empty_n, p_src_mat_cols_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_src_mat_cols_empty_n = ap_const_logic_0) or (p_src_mat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter10_assign_proc : process(rgb2hsv_4100_full_n, icmp_ln128_reg_673_pp0_iter9_reg)
    begin
                ap_block_state13_pp0_stage0_iter10 <= ((icmp_ln128_reg_673_pp0_iter9_reg = ap_const_lv1_0) and (rgb2hsv_4100_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(imgInput_499_empty_n, icmp_ln128_reg_673)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln128_reg_673 = ap_const_lv1_0) and (imgInput_499_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln128_fu_247_p2)
    begin
        if ((icmp_ln128_fu_247_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_V_fu_252_p1 <= imgInput_499_dout(8 - 1 downto 0);
    diff_V_fu_418_p2 <= std_logic_vector(unsigned(sub_ln213_fu_414_p2) + unsigned(add_ln213_1_reg_766));

    grp_fu_632_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_632_ce <= ap_const_logic_1;
        else 
            grp_fu_632_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_632_p0 <= void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_q0(20 - 1 downto 0);
    grp_fu_632_p1 <= grp_fu_632_p10(8 - 1 downto 0);
    grp_fu_632_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(diff_V_fu_418_p2),20));
    grp_fu_632_p2 <= ap_const_lv20_800(13 - 1 downto 0);

    grp_fu_641_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_641_ce <= ap_const_logic_1;
        else 
            grp_fu_641_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_641_p2 <= grp_fu_641_p20(17 - 1 downto 0);
    grp_fu_641_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln158_fu_576_p1),30));
    grp_fu_641_p3 <= ap_const_lv30_800(13 - 1 downto 0);
    icmp_ln128_fu_247_p2 <= "1" when (indvar_flatten_reg_218 = mul_ln73_reg_663) else "0";

    imgInput_499_blk_n_assign_proc : process(imgInput_499_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln128_reg_673)
    begin
        if (((icmp_ln128_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_499_blk_n <= imgInput_499_empty_n;
        else 
            imgInput_499_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgInput_499_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln128_reg_673, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_499_read <= ap_const_logic_1;
        else 
            imgInput_499_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln73_fu_235_p0 <= mul_ln73_fu_235_p00(32 - 1 downto 0);
    mul_ln73_fu_235_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_reg_653),64));
    mul_ln73_fu_235_p1 <= mul_ln73_fu_235_p10(32 - 1 downto 0);
    mul_ln73_fu_235_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_reg_658),64));

    p_src_mat_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_mat_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_mat_cols_blk_n <= p_src_mat_cols_empty_n;
        else 
            p_src_mat_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_mat_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_mat_rows_empty_n, p_src_mat_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_mat_cols_empty_n = ap_const_logic_0) or (p_src_mat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_mat_cols_read <= ap_const_logic_1;
        else 
            p_src_mat_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_mat_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_mat_rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_mat_rows_blk_n <= p_src_mat_rows_empty_n;
        else 
            p_src_mat_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_mat_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_mat_rows_empty_n, p_src_mat_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_mat_cols_empty_n = ap_const_logic_0) or (p_src_mat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_mat_rows_read <= ap_const_logic_1;
        else 
            p_src_mat_rows_read <= ap_const_logic_0;
        end if; 
    end process;

    ret_17_fu_305_p2 <= (ret_26_fu_299_p2 xor ap_const_lv9_100);
    ret_19_fu_365_p2 <= (ret_27_fu_359_p2 xor ap_const_lv9_100);
    ret_22_fu_449_p2 <= (select_ln126_fu_423_p3 and ret_28_fu_445_p2);
    ret_23_fu_468_p2 <= std_logic_vector(unsigned(zext_ln123_reg_696_pp0_iter5_reg) - unsigned(zext_ln215_1_reg_750_pp0_iter5_reg));
    ret_24_fu_517_p2 <= std_logic_vector(unsigned(zext_ln215_1_reg_750_pp0_iter5_reg) - unsigned(zext_ln1347_reg_703_pp0_iter5_reg));
    ret_25_fu_331_p2 <= std_logic_vector(unsigned(zext_ln1347_1_fu_328_p1) - unsigned(zext_ln123_1_fu_324_p1));
    ret_26_fu_299_p2 <= std_logic_vector(unsigned(zext_ln123_fu_276_p1) - unsigned(zext_ln1347_fu_279_p1));
    ret_27_fu_359_p2 <= std_logic_vector(unsigned(zext_ln215_fu_352_p1) - unsigned(zext_ln215_1_fu_356_p1));
    ret_28_fu_445_p2 <= std_logic_vector(unsigned(zext_ln1347_reg_703_pp0_iter5_reg) - unsigned(zext_ln123_reg_696_pp0_iter5_reg));
    ret_fu_337_p2 <= std_logic_vector(unsigned(ret_25_fu_331_p2) + unsigned(ap_const_lv10_100));

    rgb2hsv_4100_blk_n_assign_proc : process(rgb2hsv_4100_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln128_reg_673_pp0_iter9_reg)
    begin
        if (((icmp_ln128_reg_673_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            rgb2hsv_4100_blk_n <= rgb2hsv_4100_full_n;
        else 
            rgb2hsv_4100_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rgb2hsv_4100_din <= ((add_ln213_1_reg_766_pp0_iter9_reg & op_assign_1_reg_819) & add_ln161_fu_617_p2);

    rgb2hsv_4100_write_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln128_reg_673_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_reg_673_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            rgb2hsv_4100_write <= ap_const_logic_1;
        else 
            rgb2hsv_4100_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln126_1_fu_430_p3 <= 
        ap_const_lv11_7FF when (vg_reg_778(0) = '1') else 
        ap_const_lv11_0;
    select_ln126_fu_423_p3 <= 
        ap_const_lv9_1FF when (vr_reg_772(0) = '1') else 
        ap_const_lv9_0;
    select_ln1347_1_fu_509_p3 <= 
        ap_const_lv12_FFF when (xor_ln157_1_fu_504_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln1347_fu_460_p3 <= 
        ap_const_lv13_1FFF when (xor_ln157_fu_455_p2(0) = '1') else 
        ap_const_lv13_0;
    select_ln159_fu_609_p3 <= 
        ap_const_lv8_B4 when (tmp_fu_593_p3(0) = '1') else 
        ap_const_lv8_0;
        sext_ln157_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln157_fu_494_p2),13));

        sext_ln157_2_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_24_fu_517_p2),12));

        sext_ln157_3_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln157_1_fu_543_p2),13));

        sext_ln157_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_23_fu_468_p2),11));

        sext_ln534_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_fu_337_p2),64));

    shl_ln157_1_fu_525_p3 <= (diff_V_fu_418_p2 & ap_const_lv2_0);
    shl_ln_fu_476_p3 <= (diff_V_fu_418_p2 & ap_const_lv1_0);
    sub_ln1347_fu_282_p2 <= std_logic_vector(signed(ap_const_lv9_100) - signed(zext_ln123_fu_276_p1));
    sub_ln213_fu_414_p2 <= std_logic_vector(unsigned(xf_cv_icvSaturate8u_cv_load_3_reg_761) - unsigned(vmin_V_reg_745_pp0_iter5_reg));
    tmp_fu_593_p3 <= grp_fu_641_p4(29 downto 29);
    trunc_ln158_fu_576_p1 <= void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_q0(17 - 1 downto 0);
    trunc_ln159_1_fu_600_p4 <= grp_fu_641_p4(19 downto 12);
    v_3_fu_319_p2 <= std_logic_vector(unsigned(zext_ln147_fu_316_p1) + unsigned(zext_ln123_reg_696_pp0_iter3_reg));
    v_fu_380_p2 <= std_logic_vector(unsigned(zext_ln123_1_reg_730) + unsigned(zext_ln148_fu_376_p1));
    vg_fu_403_p2 <= "1" when (v_fu_380_p2 = zext_ln870_fu_400_p1) else "0";
    vmin_V_fu_348_p2 <= std_logic_vector(unsigned(b_V_reg_677_pp0_iter3_reg) - unsigned(xf_cv_icvSaturate8u_cv_load_2_reg_725));
    void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_address0 <= zext_ln534_9_fu_565_p1(8 - 1 downto 0);

    void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_ce0 <= ap_const_logic_1;
        else 
            void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_hdiv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_address0 <= zext_ln156_fu_409_p1(8 - 1 downto 0);

    void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_ce0 <= ap_const_logic_1;
        else 
            void_bgr2hsv_9_2160_3840_1_Mat_9_2160_3840_1_2_Mat_9_2160_3840_1_2_sdiv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    vr_fu_395_p2 <= "1" when (v_fu_380_p2 = zext_ln1347_1_reg_735) else "0";
    xf_cv_icvSaturate8u_cv_address0 <= zext_ln534_8_fu_371_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address1 <= sext_ln534_fu_343_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address2 <= zext_ln534_7_fu_311_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address3 <= zext_ln534_fu_294_p1(10 - 1 downto 0);

    xf_cv_icvSaturate8u_cv_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce0 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce1 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce2 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce3_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce3 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln157_1_fu_504_p2 <= (vg_reg_778 xor ap_const_lv1_1);
    xor_ln157_fu_455_p2 <= (vr_reg_772 xor ap_const_lv1_1);
    zext_ln123_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_3_fu_319_p2),10));
    zext_ln123_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_V_reg_677),9));
    zext_ln1347_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_690_pp0_iter3_reg),10));
    zext_ln1347_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_V_reg_684),9));
    zext_ln147_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_cv_icvSaturate8u_cv_load_reg_719),9));
    zext_ln148_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_cv_icvSaturate8u_cv_q1),10));
    zext_ln156_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_fu_380_p2),64));
    zext_ln157_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln157_1_fu_525_p3),12));
    zext_ln157_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_476_p3),11));
    zext_ln215_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_690_pp0_iter3_reg),9));
    zext_ln215_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vmin_V_fu_348_p2),9));
    zext_ln534_7_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_17_fu_305_p2),64));
    zext_ln534_8_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_19_fu_365_p2),64));
    zext_ln534_9_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(diff_V_fu_418_p2),64));
    zext_ln534_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1346_fu_288_p2),64));
    zext_ln870_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_V_reg_684_pp0_iter4_reg),10));
end behav;
