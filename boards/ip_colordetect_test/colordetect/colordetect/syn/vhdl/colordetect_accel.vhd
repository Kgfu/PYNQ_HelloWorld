-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity colordetect_accel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    src_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    dst_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC );
end;


architecture behav of colordetect_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "colordetect_accel_colordetect_accel,hls_ip_2020_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=33,HLS_SYN_DSP=0,HLS_SYN_FF=10686,HLS_SYN_LUT=11260,HLS_VERSION=2020_2_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal low_thresh : STD_LOGIC_VECTOR (63 downto 0);
    signal high_thresh : STD_LOGIC_VECTOR (63 downto 0);
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal t1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal low_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal low_i_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal low_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal low_t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_i_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal low_t_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal low_t_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_t_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_t_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal colordetect_accel_entry31_U0_ap_start : STD_LOGIC;
    signal colordetect_accel_entry31_U0_ap_done : STD_LOGIC;
    signal colordetect_accel_entry31_U0_ap_continue : STD_LOGIC;
    signal colordetect_accel_entry31_U0_ap_idle : STD_LOGIC;
    signal colordetect_accel_entry31_U0_ap_ready : STD_LOGIC;
    signal colordetect_accel_entry31_U0_start_out : STD_LOGIC;
    signal colordetect_accel_entry31_U0_start_write : STD_LOGIC;
    signal colordetect_accel_entry31_U0_low_thresh_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal colordetect_accel_entry31_U0_low_thresh_out_write : STD_LOGIC;
    signal colordetect_accel_entry31_U0_high_thresh_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal colordetect_accel_entry31_U0_high_thresh_out_write : STD_LOGIC;
    signal colordetect_accel_entry31_U0_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal colordetect_accel_entry31_U0_rows_out_write : STD_LOGIC;
    signal colordetect_accel_entry31_U0_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal colordetect_accel_entry31_U0_cols_out_write : STD_LOGIC;
    signal colordetect_accel_entry31_U0_t1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal colordetect_accel_entry31_U0_t1_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_start : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_full_n : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_done : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_continue : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_idle : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_ready : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_out : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rows_read : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_cols_read : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_rows_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_cols_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_rows_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_cols_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_rows_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_cols_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_rows_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_cols_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_rows_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_cols_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_rows_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_cols_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_rows_out_write : STD_LOGIC;
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_cols_out_write : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_ap_start : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_ap_done : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_thresh_read : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_r_ce0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_r_we0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_t_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_t_ce0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_t_we0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_thresh_read : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_r_ce0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_r_we0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_t_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_t_ce0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_t_we0 : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_high_t : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_t_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_high_t : STD_LOGIC := '0';
    signal ap_sync_channel_write_high_t : STD_LOGIC;
    signal ap_channel_done_high : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_high_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_high : STD_LOGIC := '0';
    signal ap_sync_channel_write_high : STD_LOGIC;
    signal ap_channel_done_low_t : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_t_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_low_t : STD_LOGIC := '0';
    signal ap_sync_channel_write_low_t : STD_LOGIC;
    signal ap_channel_done_low : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_low_r_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_low : STD_LOGIC := '0';
    signal ap_sync_channel_write_low : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_ap_start : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_ap_done : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_ap_continue : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_ap_idle : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_ap_ready : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_start_out : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_start_write : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_imgInput_499_din : STD_LOGIC_VECTOR (23 downto 0);
    signal axis2xfMat_24_9_2160_3840_1_U0_imgInput_499_write : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_src_TREADY : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_img_rows_read : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_img_cols_read : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_img_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal axis2xfMat_24_9_2160_3840_1_U0_img_rows_out_write : STD_LOGIC;
    signal axis2xfMat_24_9_2160_3840_1_U0_img_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal axis2xfMat_24_9_2160_3840_1_U0_img_cols_out_write : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_ap_start : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_ap_done : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_ap_continue : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_ap_idle : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_ap_ready : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_imgInput_499_read : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_rgb2hsv_4100_din : STD_LOGIC_VECTOR (23 downto 0);
    signal bgr2hsv_9_2160_3840_1_U0_rgb2hsv_4100_write : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_p_src_mat_rows_read : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_p_src_mat_cols_read : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_rgb2hsv_4100_read : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_imgHelper1_4101_din : STD_LOGIC_VECTOR (7 downto 0);
    signal colorthresholding_9_0_3_2160_3840_1_U0_imgHelper1_4101_write : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_p_src_mat_rows_read : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_p_src_mat_cols_read : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_ce0 : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_we0 : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_ce1 : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_we1 : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_ce0 : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_we0 : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_ce1 : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_we1 : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_ap_start : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_read : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_read : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_ap_done : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_ap_ready : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_ap_idle : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_ap_continue : STD_LOGIC;
    signal Block_split5_proc_U0_ap_start : STD_LOGIC;
    signal Block_split5_proc_U0_ap_done : STD_LOGIC;
    signal Block_split5_proc_U0_ap_continue : STD_LOGIC;
    signal Block_split5_proc_U0_ap_idle : STD_LOGIC;
    signal Block_split5_proc_U0_ap_ready : STD_LOGIC;
    signal Block_split5_proc_U0_t1_read : STD_LOGIC;
    signal Block_split5_proc_U0_low_t_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split5_proc_U0_low_t_ce0 : STD_LOGIC;
    signal Block_split5_proc_U0_high_t_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split5_proc_U0_high_t_ce0 : STD_LOGIC;
    signal Block_split5_proc_U0_t2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split5_proc_U0_t2_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_start : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_done : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_continue : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_idle : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_ready : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_imgHelper1_4101_read : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_imgHelper2_4102_din : STD_LOGIC_VECTOR (7 downto 0);
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_imgHelper2_4102_write : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_p_src_rows_read : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_p_src_cols_read : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_start : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_done : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_continue : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_idle : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_ready : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_imgHelper2_4102_read : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_imgHelper3_4103_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_imgHelper3_4103_write : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_p_src_rows_read : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_p_src_cols_read : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_start : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_done : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_continue : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_idle : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_ready : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_imgHelper2_4102_read : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_imgHelper3_4103_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_imgHelper3_4103_write : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_p_src_rows_read : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_p_src_cols_read : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_ap_start : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_ap_done : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_ap_continue : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_ap_idle : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_ap_ready : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_imgHelper1_4101_read : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_imgHelper2_4102_din : STD_LOGIC_VECTOR (7 downto 0);
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_imgHelper2_4102_write : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_p_src_rows_read : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_p_src_cols_read : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_ap_start : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_ap_done : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_ap_continue : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_ap_idle : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_ap_ready : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_imgOutput_4105_read : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_img_rows_read : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_img_cols_read : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_dst_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal xfMat2axis_24_0_2160_3840_1_U0_dst_TVALID : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_dst_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal xfMat2axis_24_0_2160_3840_1_U0_dst_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal xfMat2axis_24_0_2160_3840_1_U0_dst_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2axis_24_0_2160_3840_1_U0_dst_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2axis_24_0_2160_3840_1_U0_dst_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2axis_24_0_2160_3840_1_U0_dst_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal low_i_full_n : STD_LOGIC;
    signal low_t_empty_n : STD_LOGIC;
    signal low_t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal low_t_we1 : STD_LOGIC;
    signal low_t_i_full_n : STD_LOGIC;
    signal low_t_t_empty_n : STD_LOGIC;
    signal high_i_full_n : STD_LOGIC;
    signal high_t_empty_n : STD_LOGIC;
    signal high_t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_t_we1 : STD_LOGIC;
    signal high_t_i_full_n : STD_LOGIC;
    signal high_t_t_empty_n : STD_LOGIC;
    signal low_thresh_c_full_n : STD_LOGIC;
    signal low_thresh_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal low_thresh_c_empty_n : STD_LOGIC;
    signal high_thresh_c_full_n : STD_LOGIC;
    signal high_thresh_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal high_thresh_c_empty_n : STD_LOGIC;
    signal rows_c_full_n : STD_LOGIC;
    signal rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c_empty_n : STD_LOGIC;
    signal cols_c_full_n : STD_LOGIC;
    signal cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_c_empty_n : STD_LOGIC;
    signal t1_c_full_n : STD_LOGIC;
    signal t1_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_c_empty_n : STD_LOGIC;
    signal imgInput_rows_c_full_n : STD_LOGIC;
    signal imgInput_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput_rows_c_empty_n : STD_LOGIC;
    signal imgInput_cols_c_full_n : STD_LOGIC;
    signal imgInput_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput_cols_c_empty_n : STD_LOGIC;
    signal rgb2hsv_rows_c_full_n : STD_LOGIC;
    signal rgb2hsv_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rgb2hsv_rows_c_empty_n : STD_LOGIC;
    signal rgb2hsv_cols_c_full_n : STD_LOGIC;
    signal rgb2hsv_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rgb2hsv_cols_c_empty_n : STD_LOGIC;
    signal imgHelper1_rows_c_full_n : STD_LOGIC;
    signal imgHelper1_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgHelper1_rows_c_empty_n : STD_LOGIC;
    signal imgHelper1_cols_c_full_n : STD_LOGIC;
    signal imgHelper1_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgHelper1_cols_c_empty_n : STD_LOGIC;
    signal imgHelper2_rows_c_full_n : STD_LOGIC;
    signal imgHelper2_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgHelper2_rows_c_empty_n : STD_LOGIC;
    signal imgHelper2_cols_c_full_n : STD_LOGIC;
    signal imgHelper2_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgHelper2_cols_c_empty_n : STD_LOGIC;
    signal imgHelper3_rows_c_full_n : STD_LOGIC;
    signal imgHelper3_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgHelper3_rows_c_empty_n : STD_LOGIC;
    signal imgHelper3_cols_c_full_n : STD_LOGIC;
    signal imgHelper3_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgHelper3_cols_c_empty_n : STD_LOGIC;
    signal imgHelper4_rows_c_full_n : STD_LOGIC;
    signal imgHelper4_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgHelper4_rows_c_empty_n : STD_LOGIC;
    signal imgHelper4_cols_c_full_n : STD_LOGIC;
    signal imgHelper4_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgHelper4_cols_c_empty_n : STD_LOGIC;
    signal imgOutput_rows_c_full_n : STD_LOGIC;
    signal imgOutput_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput_rows_c_empty_n : STD_LOGIC;
    signal imgOutput_cols_c_full_n : STD_LOGIC;
    signal imgOutput_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput_cols_c_empty_n : STD_LOGIC;
    signal imgInput_data_full_n : STD_LOGIC;
    signal imgInput_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal imgInput_data_empty_n : STD_LOGIC;
    signal imgInput_rows_c22_full_n : STD_LOGIC;
    signal imgInput_rows_c22_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput_rows_c22_empty_n : STD_LOGIC;
    signal imgInput_cols_c23_full_n : STD_LOGIC;
    signal imgInput_cols_c23_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput_cols_c23_empty_n : STD_LOGIC;
    signal rgb2hsv_data_full_n : STD_LOGIC;
    signal rgb2hsv_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal rgb2hsv_data_empty_n : STD_LOGIC;
    signal imgHelper1_data_full_n : STD_LOGIC;
    signal imgHelper1_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgHelper1_data_empty_n : STD_LOGIC;
    signal imgHelper2_data_full_n : STD_LOGIC;
    signal imgHelper2_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgHelper2_data_empty_n : STD_LOGIC;
    signal imgHelper3_data_full_n : STD_LOGIC;
    signal imgHelper3_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgHelper3_data_empty_n : STD_LOGIC;
    signal imgHelper4_data_full_n : STD_LOGIC;
    signal imgHelper4_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgHelper4_data_empty_n : STD_LOGIC;
    signal imgOutput_data_full_n : STD_LOGIC;
    signal imgOutput_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgOutput_data_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_colordetect_accel_entry31_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_colordetect_accel_entry31_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready : STD_LOGIC;
    signal start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_empty_n : STD_LOGIC;
    signal start_for_axis2xfMat_24_9_2160_3840_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_axis2xfMat_24_9_2160_3840_1_U0_full_n : STD_LOGIC;
    signal start_for_axis2xfMat_24_9_2160_3840_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_axis2xfMat_24_9_2160_3840_1_U0_empty_n : STD_LOGIC;
    signal start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_full_n : STD_LOGIC;
    signal start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_empty_n : STD_LOGIC;
    signal start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_full_n : STD_LOGIC;
    signal start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_empty_n : STD_LOGIC;
    signal start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_full_n : STD_LOGIC;
    signal start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_empty_n : STD_LOGIC;
    signal start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_full_n : STD_LOGIC;
    signal start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_empty_n : STD_LOGIC;
    signal start_for_xfMat2axis_24_0_2160_3840_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2axis_24_0_2160_3840_1_U0_full_n : STD_LOGIC;
    signal start_for_xfMat2axis_24_0_2160_3840_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2axis_24_0_2160_3840_1_U0_empty_n : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_VITIS_LOOP_184_2_proc_U0_start_write : STD_LOGIC;
    signal start_for_bgr2hsv_9_2160_3840_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_bgr2hsv_9_2160_3840_1_U0_full_n : STD_LOGIC;
    signal start_for_bgr2hsv_9_2160_3840_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_bgr2hsv_9_2160_3840_1_U0_empty_n : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_start_full_n : STD_LOGIC;
    signal bgr2hsv_9_2160_3840_1_U0_start_write : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_start_full_n : STD_LOGIC;
    signal colorthresholding_9_0_3_2160_3840_1_U0_start_write : STD_LOGIC;
    signal Block_split5_proc_U0_start_full_n : STD_LOGIC;
    signal Block_split5_proc_U0_start_write : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_start_full_n : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_25_U0_start_write : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_start_full_n : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_26_U0_start_write : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_start_full_n : STD_LOGIC;
    signal dilate_0_0_2160_3840_0_3_3_1_1_U0_start_write : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_start_full_n : STD_LOGIC;
    signal erode_0_0_2160_3840_0_3_3_1_1_U0_start_write : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_start_full_n : STD_LOGIC;
    signal xfMat2axis_24_0_2160_3840_1_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component colordetect_accel_colordetect_accel_entry31 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        low_thresh : IN STD_LOGIC_VECTOR (63 downto 0);
        high_thresh : IN STD_LOGIC_VECTOR (63 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        t1 : IN STD_LOGIC_VECTOR (31 downto 0);
        low_thresh_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        low_thresh_out_full_n : IN STD_LOGIC;
        low_thresh_out_write : OUT STD_LOGIC;
        high_thresh_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        high_thresh_out_full_n : IN STD_LOGIC;
        high_thresh_out_write : OUT STD_LOGIC;
        rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_out_full_n : IN STD_LOGIC;
        rows_out_write : OUT STD_LOGIC;
        cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_out_full_n : IN STD_LOGIC;
        cols_out_write : OUT STD_LOGIC;
        t1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        t1_out_full_n : IN STD_LOGIC;
        t1_out_write : OUT STD_LOGIC );
    end component;


    component colordetect_accel_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        imgInput_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgInput_rows_out_full_n : IN STD_LOGIC;
        imgInput_rows_out_write : OUT STD_LOGIC;
        imgInput_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgInput_cols_out_full_n : IN STD_LOGIC;
        imgInput_cols_out_write : OUT STD_LOGIC;
        rgb2hsv_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rgb2hsv_rows_out_full_n : IN STD_LOGIC;
        rgb2hsv_rows_out_write : OUT STD_LOGIC;
        rgb2hsv_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rgb2hsv_cols_out_full_n : IN STD_LOGIC;
        rgb2hsv_cols_out_write : OUT STD_LOGIC;
        imgHelper1_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgHelper1_rows_out_full_n : IN STD_LOGIC;
        imgHelper1_rows_out_write : OUT STD_LOGIC;
        imgHelper1_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgHelper1_cols_out_full_n : IN STD_LOGIC;
        imgHelper1_cols_out_write : OUT STD_LOGIC;
        imgHelper2_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgHelper2_rows_out_full_n : IN STD_LOGIC;
        imgHelper2_rows_out_write : OUT STD_LOGIC;
        imgHelper2_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgHelper2_cols_out_full_n : IN STD_LOGIC;
        imgHelper2_cols_out_write : OUT STD_LOGIC;
        imgHelper3_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgHelper3_rows_out_full_n : IN STD_LOGIC;
        imgHelper3_rows_out_write : OUT STD_LOGIC;
        imgHelper3_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgHelper3_cols_out_full_n : IN STD_LOGIC;
        imgHelper3_cols_out_write : OUT STD_LOGIC;
        imgHelper4_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgHelper4_rows_out_full_n : IN STD_LOGIC;
        imgHelper4_rows_out_write : OUT STD_LOGIC;
        imgHelper4_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgHelper4_cols_out_full_n : IN STD_LOGIC;
        imgHelper4_cols_out_write : OUT STD_LOGIC;
        imgOutput_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgOutput_rows_out_full_n : IN STD_LOGIC;
        imgOutput_rows_out_write : OUT STD_LOGIC;
        imgOutput_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgOutput_cols_out_full_n : IN STD_LOGIC;
        imgOutput_cols_out_write : OUT STD_LOGIC );
    end component;


    component colordetect_accel_Loop_VITIS_LOOP_184_2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        low_thresh_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        low_thresh_empty_n : IN STD_LOGIC;
        low_thresh_read : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        low_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        low_r_ce0 : OUT STD_LOGIC;
        low_r_we0 : OUT STD_LOGIC;
        low_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        low_t_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        low_t_ce0 : OUT STD_LOGIC;
        low_t_we0 : OUT STD_LOGIC;
        low_t_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        high_thresh_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        high_thresh_empty_n : IN STD_LOGIC;
        high_thresh_read : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        high_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        high_r_ce0 : OUT STD_LOGIC;
        high_r_we0 : OUT STD_LOGIC;
        high_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        high_t_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        high_t_ce0 : OUT STD_LOGIC;
        high_t_we0 : OUT STD_LOGIC;
        high_t_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component colordetect_accel_axis2xfMat_24_9_2160_3840_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        imgInput_499_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        imgInput_499_full_n : IN STD_LOGIC;
        imgInput_499_write : OUT STD_LOGIC;
        src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        src_TVALID : IN STD_LOGIC;
        src_TREADY : OUT STD_LOGIC;
        src_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        src_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_empty_n : IN STD_LOGIC;
        img_rows_read : OUT STD_LOGIC;
        img_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_empty_n : IN STD_LOGIC;
        img_cols_read : OUT STD_LOGIC;
        img_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_rows_out_full_n : IN STD_LOGIC;
        img_rows_out_write : OUT STD_LOGIC;
        img_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cols_out_full_n : IN STD_LOGIC;
        img_cols_out_write : OUT STD_LOGIC );
    end component;


    component colordetect_accel_bgr2hsv_9_2160_3840_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgInput_499_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        imgInput_499_empty_n : IN STD_LOGIC;
        imgInput_499_read : OUT STD_LOGIC;
        rgb2hsv_4100_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        rgb2hsv_4100_full_n : IN STD_LOGIC;
        rgb2hsv_4100_write : OUT STD_LOGIC;
        p_src_mat_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_mat_rows_empty_n : IN STD_LOGIC;
        p_src_mat_rows_read : OUT STD_LOGIC;
        p_src_mat_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_mat_cols_empty_n : IN STD_LOGIC;
        p_src_mat_cols_read : OUT STD_LOGIC );
    end component;


    component colordetect_accel_colorthresholding_9_0_3_2160_3840_1_s IS
    port (
        rgb2hsv_4100_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        rgb2hsv_4100_empty_n : IN STD_LOGIC;
        rgb2hsv_4100_read : OUT STD_LOGIC;
        imgHelper1_4101_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgHelper1_4101_full_n : IN STD_LOGIC;
        imgHelper1_4101_write : OUT STD_LOGIC;
        p_src_mat_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_mat_rows_empty_n : IN STD_LOGIC;
        p_src_mat_rows_read : OUT STD_LOGIC;
        p_src_mat_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_mat_cols_empty_n : IN STD_LOGIC;
        p_src_mat_cols_read : OUT STD_LOGIC;
        low_thresh_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        low_thresh_ce0 : OUT STD_LOGIC;
        low_thresh_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        low_thresh_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        low_thresh_we0 : OUT STD_LOGIC;
        low_thresh_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        low_thresh_ce1 : OUT STD_LOGIC;
        low_thresh_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        low_thresh_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        low_thresh_we1 : OUT STD_LOGIC;
        high_thresh_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        high_thresh_ce0 : OUT STD_LOGIC;
        high_thresh_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        high_thresh_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        high_thresh_we0 : OUT STD_LOGIC;
        high_thresh_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        high_thresh_ce1 : OUT STD_LOGIC;
        high_thresh_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        high_thresh_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        high_thresh_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        low_thresh_empty_n : IN STD_LOGIC;
        low_thresh_read : OUT STD_LOGIC;
        high_thresh_empty_n : IN STD_LOGIC;
        high_thresh_read : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component colordetect_accel_Block_split5_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        t1_empty_n : IN STD_LOGIC;
        t1_read : OUT STD_LOGIC;
        low_t_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        low_t_ce0 : OUT STD_LOGIC;
        low_t_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        high_t_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        high_t_ce0 : OUT STD_LOGIC;
        high_t_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t2_ap_vld : OUT STD_LOGIC );
    end component;


    component colordetect_accel_erode_0_0_2160_3840_0_3_3_1_1_25 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgHelper1_4101_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgHelper1_4101_empty_n : IN STD_LOGIC;
        imgHelper1_4101_read : OUT STD_LOGIC;
        imgHelper2_4102_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgHelper2_4102_full_n : IN STD_LOGIC;
        imgHelper2_4102_write : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC );
    end component;


    component colordetect_accel_dilate_0_0_2160_3840_0_3_3_1_1_26 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgHelper2_4102_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgHelper2_4102_empty_n : IN STD_LOGIC;
        imgHelper2_4102_read : OUT STD_LOGIC;
        imgHelper3_4103_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgHelper3_4103_full_n : IN STD_LOGIC;
        imgHelper3_4103_write : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC );
    end component;


    component colordetect_accel_dilate_0_0_2160_3840_0_3_3_1_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgHelper2_4102_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgHelper2_4102_empty_n : IN STD_LOGIC;
        imgHelper2_4102_read : OUT STD_LOGIC;
        imgHelper3_4103_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgHelper3_4103_full_n : IN STD_LOGIC;
        imgHelper3_4103_write : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC );
    end component;


    component colordetect_accel_erode_0_0_2160_3840_0_3_3_1_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgHelper1_4101_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgHelper1_4101_empty_n : IN STD_LOGIC;
        imgHelper1_4101_read : OUT STD_LOGIC;
        imgHelper2_4102_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgHelper2_4102_full_n : IN STD_LOGIC;
        imgHelper2_4102_write : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC );
    end component;


    component colordetect_accel_xfMat2axis_24_0_2160_3840_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgOutput_4105_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgOutput_4105_empty_n : IN STD_LOGIC;
        imgOutput_4105_read : OUT STD_LOGIC;
        img_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_empty_n : IN STD_LOGIC;
        img_rows_read : OUT STD_LOGIC;
        img_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_empty_n : IN STD_LOGIC;
        img_cols_read : OUT STD_LOGIC;
        dst_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        dst_TVALID : OUT STD_LOGIC;
        dst_TREADY : IN STD_LOGIC;
        dst_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component colordetect_accel_low IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_low_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w32_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w32_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w32_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w32_d8_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w32_d9_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w24_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_start_for_axis2xfMat_24_9_2160_3840_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_start_for_erode_0_0_2160_3840_0_3_3_1_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_start_for_xfMat2axis_24_0_2160_3840_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_start_for_bgr2hsv_9_2160_3840_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component colordetect_accel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        low_thresh : OUT STD_LOGIC_VECTOR (63 downto 0);
        high_thresh : OUT STD_LOGIC_VECTOR (63 downto 0);
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        t1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t2 : IN STD_LOGIC_VECTOR (31 downto 0);
        t2_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component colordetect_accel_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component colordetect_accel_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component colordetect_accel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        low_thresh => low_thresh,
        high_thresh => high_thresh,
        rows => rows,
        cols => cols,
        t1 => t1,
        t2 => Block_split5_proc_U0_t2,
        t2_ap_vld => Block_split5_proc_U0_t2_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component colordetect_accel_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARADDR,
        I_ARID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARID,
        I_ARLEN => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARLEN,
        I_ARSIZE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARSIZE,
        I_ARLOCK => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARLOCK,
        I_ARCACHE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARCACHE,
        I_ARQOS => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARQOS,
        I_ARPROT => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARPROT,
        I_ARUSER => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARUSER,
        I_ARBURST => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARBURST,
        I_ARREGION => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    gmem1_m_axi_U : component colordetect_accel_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARADDR,
        I_ARID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARID,
        I_ARLEN => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARLEN,
        I_ARSIZE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARSIZE,
        I_ARLOCK => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARLOCK,
        I_ARCACHE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARCACHE,
        I_ARQOS => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARQOS,
        I_ARPROT => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARPROT,
        I_ARUSER => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARUSER,
        I_ARBURST => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARBURST,
        I_ARREGION => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    low_U : component colordetect_accel_low
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_VITIS_LOOP_184_2_proc_U0_low_r_address0,
        i_ce0 => Loop_VITIS_LOOP_184_2_proc_U0_low_r_ce0,
        i_we0 => Loop_VITIS_LOOP_184_2_proc_U0_low_r_we0,
        i_d0 => Loop_VITIS_LOOP_184_2_proc_U0_low_r_d0,
        i_q0 => low_i_q0,
        i_address1 => ap_const_lv4_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => low_i_q1,
        t_address0 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_address0,
        t_ce0 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => low_t_q0,
        t_address1 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_address1,
        t_ce1 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_ce1,
        t_q1 => low_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => low_i_full_n,
        i_write => ap_channel_done_low,
        t_empty_n => low_t_empty_n,
        t_read => colorthresholding_9_0_3_2160_3840_1_U0_ap_ready);

    high_U : component colordetect_accel_low
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_VITIS_LOOP_184_2_proc_U0_high_r_address0,
        i_ce0 => Loop_VITIS_LOOP_184_2_proc_U0_high_r_ce0,
        i_we0 => Loop_VITIS_LOOP_184_2_proc_U0_high_r_we0,
        i_d0 => Loop_VITIS_LOOP_184_2_proc_U0_high_r_d0,
        i_q0 => high_i_q0,
        i_address1 => ap_const_lv4_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => high_i_q1,
        t_address0 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_address0,
        t_ce0 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => high_t_q0,
        t_address1 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_address1,
        t_ce1 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_ce1,
        t_q1 => high_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => high_i_full_n,
        i_write => ap_channel_done_high,
        t_empty_n => high_t_empty_n,
        t_read => colorthresholding_9_0_3_2160_3840_1_U0_ap_ready);

    low_t_U : component colordetect_accel_low_t
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_VITIS_LOOP_184_2_proc_U0_low_t_address0,
        i_ce0 => Loop_VITIS_LOOP_184_2_proc_U0_low_t_ce0,
        i_we0 => Loop_VITIS_LOOP_184_2_proc_U0_low_t_we0,
        i_d0 => Loop_VITIS_LOOP_184_2_proc_U0_low_t_d0,
        i_q0 => low_t_i_q0,
        t_address0 => Block_split5_proc_U0_low_t_address0,
        t_ce0 => Block_split5_proc_U0_low_t_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => low_t_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => low_t_i_full_n,
        i_write => ap_channel_done_low_t,
        t_empty_n => low_t_t_empty_n,
        t_read => Block_split5_proc_U0_ap_ready);

    high_t_U : component colordetect_accel_low_t
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_VITIS_LOOP_184_2_proc_U0_high_t_address0,
        i_ce0 => Loop_VITIS_LOOP_184_2_proc_U0_high_t_ce0,
        i_we0 => Loop_VITIS_LOOP_184_2_proc_U0_high_t_we0,
        i_d0 => Loop_VITIS_LOOP_184_2_proc_U0_high_t_d0,
        i_q0 => high_t_i_q0,
        t_address0 => Block_split5_proc_U0_high_t_address0,
        t_ce0 => Block_split5_proc_U0_high_t_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => high_t_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => high_t_i_full_n,
        i_write => ap_channel_done_high_t,
        t_empty_n => high_t_t_empty_n,
        t_read => Block_split5_proc_U0_ap_ready);

    colordetect_accel_entry31_U0 : component colordetect_accel_colordetect_accel_entry31
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => colordetect_accel_entry31_U0_ap_start,
        start_full_n => start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_full_n,
        ap_done => colordetect_accel_entry31_U0_ap_done,
        ap_continue => colordetect_accel_entry31_U0_ap_continue,
        ap_idle => colordetect_accel_entry31_U0_ap_idle,
        ap_ready => colordetect_accel_entry31_U0_ap_ready,
        start_out => colordetect_accel_entry31_U0_start_out,
        start_write => colordetect_accel_entry31_U0_start_write,
        low_thresh => low_thresh,
        high_thresh => high_thresh,
        rows => rows,
        cols => cols,
        t1 => t1,
        low_thresh_out_din => colordetect_accel_entry31_U0_low_thresh_out_din,
        low_thresh_out_full_n => low_thresh_c_full_n,
        low_thresh_out_write => colordetect_accel_entry31_U0_low_thresh_out_write,
        high_thresh_out_din => colordetect_accel_entry31_U0_high_thresh_out_din,
        high_thresh_out_full_n => high_thresh_c_full_n,
        high_thresh_out_write => colordetect_accel_entry31_U0_high_thresh_out_write,
        rows_out_din => colordetect_accel_entry31_U0_rows_out_din,
        rows_out_full_n => rows_c_full_n,
        rows_out_write => colordetect_accel_entry31_U0_rows_out_write,
        cols_out_din => colordetect_accel_entry31_U0_cols_out_din,
        cols_out_full_n => cols_c_full_n,
        cols_out_write => colordetect_accel_entry31_U0_cols_out_write,
        t1_out_din => colordetect_accel_entry31_U0_t1_out_din,
        t1_out_full_n => t1_c_full_n,
        t1_out_write => colordetect_accel_entry31_U0_t1_out_write);

    Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0 : component colordetect_accel_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_start,
        start_full_n => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_full_n,
        ap_done => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_done,
        ap_continue => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_continue,
        ap_idle => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_idle,
        ap_ready => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_ready,
        start_out => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_out,
        start_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_write,
        rows_dout => rows_c_dout,
        rows_empty_n => rows_c_empty_n,
        rows_read => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rows_read,
        cols_dout => cols_c_dout,
        cols_empty_n => cols_c_empty_n,
        cols_read => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_cols_read,
        imgInput_rows_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_rows_out_din,
        imgInput_rows_out_full_n => imgInput_rows_c_full_n,
        imgInput_rows_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_rows_out_write,
        imgInput_cols_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_cols_out_din,
        imgInput_cols_out_full_n => imgInput_cols_c_full_n,
        imgInput_cols_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_cols_out_write,
        rgb2hsv_rows_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_rows_out_din,
        rgb2hsv_rows_out_full_n => rgb2hsv_rows_c_full_n,
        rgb2hsv_rows_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_rows_out_write,
        rgb2hsv_cols_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_cols_out_din,
        rgb2hsv_cols_out_full_n => rgb2hsv_cols_c_full_n,
        rgb2hsv_cols_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_cols_out_write,
        imgHelper1_rows_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_rows_out_din,
        imgHelper1_rows_out_full_n => imgHelper1_rows_c_full_n,
        imgHelper1_rows_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_rows_out_write,
        imgHelper1_cols_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_cols_out_din,
        imgHelper1_cols_out_full_n => imgHelper1_cols_c_full_n,
        imgHelper1_cols_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_cols_out_write,
        imgHelper2_rows_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_rows_out_din,
        imgHelper2_rows_out_full_n => imgHelper2_rows_c_full_n,
        imgHelper2_rows_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_rows_out_write,
        imgHelper2_cols_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_cols_out_din,
        imgHelper2_cols_out_full_n => imgHelper2_cols_c_full_n,
        imgHelper2_cols_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_cols_out_write,
        imgHelper3_rows_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_rows_out_din,
        imgHelper3_rows_out_full_n => imgHelper3_rows_c_full_n,
        imgHelper3_rows_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_rows_out_write,
        imgHelper3_cols_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_cols_out_din,
        imgHelper3_cols_out_full_n => imgHelper3_cols_c_full_n,
        imgHelper3_cols_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_cols_out_write,
        imgHelper4_rows_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_rows_out_din,
        imgHelper4_rows_out_full_n => imgHelper4_rows_c_full_n,
        imgHelper4_rows_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_rows_out_write,
        imgHelper4_cols_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_cols_out_din,
        imgHelper4_cols_out_full_n => imgHelper4_cols_c_full_n,
        imgHelper4_cols_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_cols_out_write,
        imgOutput_rows_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_rows_out_din,
        imgOutput_rows_out_full_n => imgOutput_rows_c_full_n,
        imgOutput_rows_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_rows_out_write,
        imgOutput_cols_out_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_cols_out_din,
        imgOutput_cols_out_full_n => imgOutput_cols_c_full_n,
        imgOutput_cols_out_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_cols_out_write);

    Loop_VITIS_LOOP_184_2_proc_U0 : component colordetect_accel_Loop_VITIS_LOOP_184_2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_VITIS_LOOP_184_2_proc_U0_ap_start,
        ap_done => Loop_VITIS_LOOP_184_2_proc_U0_ap_done,
        ap_continue => Loop_VITIS_LOOP_184_2_proc_U0_ap_continue,
        ap_idle => Loop_VITIS_LOOP_184_2_proc_U0_ap_idle,
        ap_ready => Loop_VITIS_LOOP_184_2_proc_U0_ap_ready,
        low_thresh_dout => low_thresh_c_dout,
        low_thresh_empty_n => low_thresh_c_empty_n,
        low_thresh_read => Loop_VITIS_LOOP_184_2_proc_U0_low_thresh_read,
        m_axi_gmem0_AWVALID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        low_r_address0 => Loop_VITIS_LOOP_184_2_proc_U0_low_r_address0,
        low_r_ce0 => Loop_VITIS_LOOP_184_2_proc_U0_low_r_ce0,
        low_r_we0 => Loop_VITIS_LOOP_184_2_proc_U0_low_r_we0,
        low_r_d0 => Loop_VITIS_LOOP_184_2_proc_U0_low_r_d0,
        low_t_address0 => Loop_VITIS_LOOP_184_2_proc_U0_low_t_address0,
        low_t_ce0 => Loop_VITIS_LOOP_184_2_proc_U0_low_t_ce0,
        low_t_we0 => Loop_VITIS_LOOP_184_2_proc_U0_low_t_we0,
        low_t_d0 => Loop_VITIS_LOOP_184_2_proc_U0_low_t_d0,
        high_thresh_dout => high_thresh_c_dout,
        high_thresh_empty_n => high_thresh_c_empty_n,
        high_thresh_read => Loop_VITIS_LOOP_184_2_proc_U0_high_thresh_read,
        m_axi_gmem1_AWVALID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => gmem1_ARREADY,
        m_axi_gmem1_ARADDR => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => gmem1_RVALID,
        m_axi_gmem1_RREADY => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => gmem1_RDATA,
        m_axi_gmem1_RLAST => gmem1_RLAST,
        m_axi_gmem1_RID => gmem1_RID,
        m_axi_gmem1_RUSER => gmem1_RUSER,
        m_axi_gmem1_RRESP => gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => Loop_VITIS_LOOP_184_2_proc_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        high_r_address0 => Loop_VITIS_LOOP_184_2_proc_U0_high_r_address0,
        high_r_ce0 => Loop_VITIS_LOOP_184_2_proc_U0_high_r_ce0,
        high_r_we0 => Loop_VITIS_LOOP_184_2_proc_U0_high_r_we0,
        high_r_d0 => Loop_VITIS_LOOP_184_2_proc_U0_high_r_d0,
        high_t_address0 => Loop_VITIS_LOOP_184_2_proc_U0_high_t_address0,
        high_t_ce0 => Loop_VITIS_LOOP_184_2_proc_U0_high_t_ce0,
        high_t_we0 => Loop_VITIS_LOOP_184_2_proc_U0_high_t_we0,
        high_t_d0 => Loop_VITIS_LOOP_184_2_proc_U0_high_t_d0);

    axis2xfMat_24_9_2160_3840_1_U0 : component colordetect_accel_axis2xfMat_24_9_2160_3840_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => axis2xfMat_24_9_2160_3840_1_U0_ap_start,
        start_full_n => start_for_bgr2hsv_9_2160_3840_1_U0_full_n,
        ap_done => axis2xfMat_24_9_2160_3840_1_U0_ap_done,
        ap_continue => axis2xfMat_24_9_2160_3840_1_U0_ap_continue,
        ap_idle => axis2xfMat_24_9_2160_3840_1_U0_ap_idle,
        ap_ready => axis2xfMat_24_9_2160_3840_1_U0_ap_ready,
        start_out => axis2xfMat_24_9_2160_3840_1_U0_start_out,
        start_write => axis2xfMat_24_9_2160_3840_1_U0_start_write,
        imgInput_499_din => axis2xfMat_24_9_2160_3840_1_U0_imgInput_499_din,
        imgInput_499_full_n => imgInput_data_full_n,
        imgInput_499_write => axis2xfMat_24_9_2160_3840_1_U0_imgInput_499_write,
        src_TDATA => src_TDATA,
        src_TVALID => src_TVALID,
        src_TREADY => axis2xfMat_24_9_2160_3840_1_U0_src_TREADY,
        src_TKEEP => src_TKEEP,
        src_TSTRB => src_TSTRB,
        src_TUSER => src_TUSER,
        src_TLAST => src_TLAST,
        src_TID => src_TID,
        src_TDEST => src_TDEST,
        img_rows_dout => imgInput_rows_c_dout,
        img_rows_empty_n => imgInput_rows_c_empty_n,
        img_rows_read => axis2xfMat_24_9_2160_3840_1_U0_img_rows_read,
        img_cols_dout => imgInput_cols_c_dout,
        img_cols_empty_n => imgInput_cols_c_empty_n,
        img_cols_read => axis2xfMat_24_9_2160_3840_1_U0_img_cols_read,
        img_rows_out_din => axis2xfMat_24_9_2160_3840_1_U0_img_rows_out_din,
        img_rows_out_full_n => imgInput_rows_c22_full_n,
        img_rows_out_write => axis2xfMat_24_9_2160_3840_1_U0_img_rows_out_write,
        img_cols_out_din => axis2xfMat_24_9_2160_3840_1_U0_img_cols_out_din,
        img_cols_out_full_n => imgInput_cols_c23_full_n,
        img_cols_out_write => axis2xfMat_24_9_2160_3840_1_U0_img_cols_out_write);

    bgr2hsv_9_2160_3840_1_U0 : component colordetect_accel_bgr2hsv_9_2160_3840_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => bgr2hsv_9_2160_3840_1_U0_ap_start,
        ap_done => bgr2hsv_9_2160_3840_1_U0_ap_done,
        ap_continue => bgr2hsv_9_2160_3840_1_U0_ap_continue,
        ap_idle => bgr2hsv_9_2160_3840_1_U0_ap_idle,
        ap_ready => bgr2hsv_9_2160_3840_1_U0_ap_ready,
        imgInput_499_dout => imgInput_data_dout,
        imgInput_499_empty_n => imgInput_data_empty_n,
        imgInput_499_read => bgr2hsv_9_2160_3840_1_U0_imgInput_499_read,
        rgb2hsv_4100_din => bgr2hsv_9_2160_3840_1_U0_rgb2hsv_4100_din,
        rgb2hsv_4100_full_n => rgb2hsv_data_full_n,
        rgb2hsv_4100_write => bgr2hsv_9_2160_3840_1_U0_rgb2hsv_4100_write,
        p_src_mat_rows_dout => imgInput_rows_c22_dout,
        p_src_mat_rows_empty_n => imgInput_rows_c22_empty_n,
        p_src_mat_rows_read => bgr2hsv_9_2160_3840_1_U0_p_src_mat_rows_read,
        p_src_mat_cols_dout => imgInput_cols_c23_dout,
        p_src_mat_cols_empty_n => imgInput_cols_c23_empty_n,
        p_src_mat_cols_read => bgr2hsv_9_2160_3840_1_U0_p_src_mat_cols_read);

    colorthresholding_9_0_3_2160_3840_1_U0 : component colordetect_accel_colorthresholding_9_0_3_2160_3840_1_s
    port map (
        rgb2hsv_4100_dout => rgb2hsv_data_dout,
        rgb2hsv_4100_empty_n => rgb2hsv_data_empty_n,
        rgb2hsv_4100_read => colorthresholding_9_0_3_2160_3840_1_U0_rgb2hsv_4100_read,
        imgHelper1_4101_din => colorthresholding_9_0_3_2160_3840_1_U0_imgHelper1_4101_din,
        imgHelper1_4101_full_n => imgHelper1_data_full_n,
        imgHelper1_4101_write => colorthresholding_9_0_3_2160_3840_1_U0_imgHelper1_4101_write,
        p_src_mat_rows_dout => rgb2hsv_rows_c_dout,
        p_src_mat_rows_empty_n => rgb2hsv_rows_c_empty_n,
        p_src_mat_rows_read => colorthresholding_9_0_3_2160_3840_1_U0_p_src_mat_rows_read,
        p_src_mat_cols_dout => rgb2hsv_cols_c_dout,
        p_src_mat_cols_empty_n => rgb2hsv_cols_c_empty_n,
        p_src_mat_cols_read => colorthresholding_9_0_3_2160_3840_1_U0_p_src_mat_cols_read,
        low_thresh_address0 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_address0,
        low_thresh_ce0 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_ce0,
        low_thresh_d0 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_d0,
        low_thresh_q0 => low_t_q0,
        low_thresh_we0 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_we0,
        low_thresh_address1 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_address1,
        low_thresh_ce1 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_ce1,
        low_thresh_d1 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_d1,
        low_thresh_q1 => low_t_q1,
        low_thresh_we1 => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_we1,
        high_thresh_address0 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_address0,
        high_thresh_ce0 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_ce0,
        high_thresh_d0 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_d0,
        high_thresh_q0 => high_t_q0,
        high_thresh_we0 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_we0,
        high_thresh_address1 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_address1,
        high_thresh_ce1 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_ce1,
        high_thresh_d1 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_d1,
        high_thresh_q1 => high_t_q1,
        high_thresh_we1 => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => colorthresholding_9_0_3_2160_3840_1_U0_ap_start,
        low_thresh_empty_n => ap_const_logic_0,
        low_thresh_read => colorthresholding_9_0_3_2160_3840_1_U0_low_thresh_read,
        high_thresh_empty_n => ap_const_logic_0,
        high_thresh_read => colorthresholding_9_0_3_2160_3840_1_U0_high_thresh_read,
        ap_done => colorthresholding_9_0_3_2160_3840_1_U0_ap_done,
        ap_ready => colorthresholding_9_0_3_2160_3840_1_U0_ap_ready,
        ap_idle => colorthresholding_9_0_3_2160_3840_1_U0_ap_idle,
        ap_continue => colorthresholding_9_0_3_2160_3840_1_U0_ap_continue);

    Block_split5_proc_U0 : component colordetect_accel_Block_split5_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_split5_proc_U0_ap_start,
        ap_done => Block_split5_proc_U0_ap_done,
        ap_continue => Block_split5_proc_U0_ap_continue,
        ap_idle => Block_split5_proc_U0_ap_idle,
        ap_ready => Block_split5_proc_U0_ap_ready,
        t1_dout => t1_c_dout,
        t1_empty_n => t1_c_empty_n,
        t1_read => Block_split5_proc_U0_t1_read,
        low_t_address0 => Block_split5_proc_U0_low_t_address0,
        low_t_ce0 => Block_split5_proc_U0_low_t_ce0,
        low_t_q0 => low_t_t_q0,
        high_t_address0 => Block_split5_proc_U0_high_t_address0,
        high_t_ce0 => Block_split5_proc_U0_high_t_ce0,
        high_t_q0 => high_t_t_q0,
        t2 => Block_split5_proc_U0_t2,
        t2_ap_vld => Block_split5_proc_U0_t2_ap_vld);

    erode_0_0_2160_3840_0_3_3_1_1_25_U0 : component colordetect_accel_erode_0_0_2160_3840_0_3_3_1_1_25
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_start,
        ap_done => erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_done,
        ap_continue => erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_continue,
        ap_idle => erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_idle,
        ap_ready => erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_ready,
        imgHelper1_4101_dout => imgHelper1_data_dout,
        imgHelper1_4101_empty_n => imgHelper1_data_empty_n,
        imgHelper1_4101_read => erode_0_0_2160_3840_0_3_3_1_1_25_U0_imgHelper1_4101_read,
        imgHelper2_4102_din => erode_0_0_2160_3840_0_3_3_1_1_25_U0_imgHelper2_4102_din,
        imgHelper2_4102_full_n => imgHelper2_data_full_n,
        imgHelper2_4102_write => erode_0_0_2160_3840_0_3_3_1_1_25_U0_imgHelper2_4102_write,
        p_src_rows_dout => imgHelper1_rows_c_dout,
        p_src_rows_empty_n => imgHelper1_rows_c_empty_n,
        p_src_rows_read => erode_0_0_2160_3840_0_3_3_1_1_25_U0_p_src_rows_read,
        p_src_cols_dout => imgHelper1_cols_c_dout,
        p_src_cols_empty_n => imgHelper1_cols_c_empty_n,
        p_src_cols_read => erode_0_0_2160_3840_0_3_3_1_1_25_U0_p_src_cols_read);

    dilate_0_0_2160_3840_0_3_3_1_1_26_U0 : component colordetect_accel_dilate_0_0_2160_3840_0_3_3_1_1_26
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_start,
        ap_done => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_done,
        ap_continue => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_continue,
        ap_idle => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_idle,
        ap_ready => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_ready,
        imgHelper2_4102_dout => imgHelper2_data_dout,
        imgHelper2_4102_empty_n => imgHelper2_data_empty_n,
        imgHelper2_4102_read => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_imgHelper2_4102_read,
        imgHelper3_4103_din => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_imgHelper3_4103_din,
        imgHelper3_4103_full_n => imgHelper3_data_full_n,
        imgHelper3_4103_write => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_imgHelper3_4103_write,
        p_src_rows_dout => imgHelper2_rows_c_dout,
        p_src_rows_empty_n => imgHelper2_rows_c_empty_n,
        p_src_rows_read => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_p_src_rows_read,
        p_src_cols_dout => imgHelper2_cols_c_dout,
        p_src_cols_empty_n => imgHelper2_cols_c_empty_n,
        p_src_cols_read => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_p_src_cols_read);

    dilate_0_0_2160_3840_0_3_3_1_1_U0 : component colordetect_accel_dilate_0_0_2160_3840_0_3_3_1_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_start,
        ap_done => dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_done,
        ap_continue => dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_continue,
        ap_idle => dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_idle,
        ap_ready => dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_ready,
        imgHelper2_4102_dout => imgHelper3_data_dout,
        imgHelper2_4102_empty_n => imgHelper3_data_empty_n,
        imgHelper2_4102_read => dilate_0_0_2160_3840_0_3_3_1_1_U0_imgHelper2_4102_read,
        imgHelper3_4103_din => dilate_0_0_2160_3840_0_3_3_1_1_U0_imgHelper3_4103_din,
        imgHelper3_4103_full_n => imgHelper4_data_full_n,
        imgHelper3_4103_write => dilate_0_0_2160_3840_0_3_3_1_1_U0_imgHelper3_4103_write,
        p_src_rows_dout => imgHelper3_rows_c_dout,
        p_src_rows_empty_n => imgHelper3_rows_c_empty_n,
        p_src_rows_read => dilate_0_0_2160_3840_0_3_3_1_1_U0_p_src_rows_read,
        p_src_cols_dout => imgHelper3_cols_c_dout,
        p_src_cols_empty_n => imgHelper3_cols_c_empty_n,
        p_src_cols_read => dilate_0_0_2160_3840_0_3_3_1_1_U0_p_src_cols_read);

    erode_0_0_2160_3840_0_3_3_1_1_U0 : component colordetect_accel_erode_0_0_2160_3840_0_3_3_1_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => erode_0_0_2160_3840_0_3_3_1_1_U0_ap_start,
        ap_done => erode_0_0_2160_3840_0_3_3_1_1_U0_ap_done,
        ap_continue => erode_0_0_2160_3840_0_3_3_1_1_U0_ap_continue,
        ap_idle => erode_0_0_2160_3840_0_3_3_1_1_U0_ap_idle,
        ap_ready => erode_0_0_2160_3840_0_3_3_1_1_U0_ap_ready,
        imgHelper1_4101_dout => imgHelper4_data_dout,
        imgHelper1_4101_empty_n => imgHelper4_data_empty_n,
        imgHelper1_4101_read => erode_0_0_2160_3840_0_3_3_1_1_U0_imgHelper1_4101_read,
        imgHelper2_4102_din => erode_0_0_2160_3840_0_3_3_1_1_U0_imgHelper2_4102_din,
        imgHelper2_4102_full_n => imgOutput_data_full_n,
        imgHelper2_4102_write => erode_0_0_2160_3840_0_3_3_1_1_U0_imgHelper2_4102_write,
        p_src_rows_dout => imgHelper4_rows_c_dout,
        p_src_rows_empty_n => imgHelper4_rows_c_empty_n,
        p_src_rows_read => erode_0_0_2160_3840_0_3_3_1_1_U0_p_src_rows_read,
        p_src_cols_dout => imgHelper4_cols_c_dout,
        p_src_cols_empty_n => imgHelper4_cols_c_empty_n,
        p_src_cols_read => erode_0_0_2160_3840_0_3_3_1_1_U0_p_src_cols_read);

    xfMat2axis_24_0_2160_3840_1_U0 : component colordetect_accel_xfMat2axis_24_0_2160_3840_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => xfMat2axis_24_0_2160_3840_1_U0_ap_start,
        ap_done => xfMat2axis_24_0_2160_3840_1_U0_ap_done,
        ap_continue => xfMat2axis_24_0_2160_3840_1_U0_ap_continue,
        ap_idle => xfMat2axis_24_0_2160_3840_1_U0_ap_idle,
        ap_ready => xfMat2axis_24_0_2160_3840_1_U0_ap_ready,
        imgOutput_4105_dout => imgOutput_data_dout,
        imgOutput_4105_empty_n => imgOutput_data_empty_n,
        imgOutput_4105_read => xfMat2axis_24_0_2160_3840_1_U0_imgOutput_4105_read,
        img_rows_dout => imgOutput_rows_c_dout,
        img_rows_empty_n => imgOutput_rows_c_empty_n,
        img_rows_read => xfMat2axis_24_0_2160_3840_1_U0_img_rows_read,
        img_cols_dout => imgOutput_cols_c_dout,
        img_cols_empty_n => imgOutput_cols_c_empty_n,
        img_cols_read => xfMat2axis_24_0_2160_3840_1_U0_img_cols_read,
        dst_TDATA => xfMat2axis_24_0_2160_3840_1_U0_dst_TDATA,
        dst_TVALID => xfMat2axis_24_0_2160_3840_1_U0_dst_TVALID,
        dst_TREADY => dst_TREADY,
        dst_TKEEP => xfMat2axis_24_0_2160_3840_1_U0_dst_TKEEP,
        dst_TSTRB => xfMat2axis_24_0_2160_3840_1_U0_dst_TSTRB,
        dst_TUSER => xfMat2axis_24_0_2160_3840_1_U0_dst_TUSER,
        dst_TLAST => xfMat2axis_24_0_2160_3840_1_U0_dst_TLAST,
        dst_TID => xfMat2axis_24_0_2160_3840_1_U0_dst_TID,
        dst_TDEST => xfMat2axis_24_0_2160_3840_1_U0_dst_TDEST);

    low_thresh_c_U : component colordetect_accel_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => colordetect_accel_entry31_U0_low_thresh_out_din,
        if_full_n => low_thresh_c_full_n,
        if_write => colordetect_accel_entry31_U0_low_thresh_out_write,
        if_dout => low_thresh_c_dout,
        if_empty_n => low_thresh_c_empty_n,
        if_read => Loop_VITIS_LOOP_184_2_proc_U0_low_thresh_read);

    high_thresh_c_U : component colordetect_accel_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => colordetect_accel_entry31_U0_high_thresh_out_din,
        if_full_n => high_thresh_c_full_n,
        if_write => colordetect_accel_entry31_U0_high_thresh_out_write,
        if_dout => high_thresh_c_dout,
        if_empty_n => high_thresh_c_empty_n,
        if_read => Loop_VITIS_LOOP_184_2_proc_U0_high_thresh_read);

    rows_c_U : component colordetect_accel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => colordetect_accel_entry31_U0_rows_out_din,
        if_full_n => rows_c_full_n,
        if_write => colordetect_accel_entry31_U0_rows_out_write,
        if_dout => rows_c_dout,
        if_empty_n => rows_c_empty_n,
        if_read => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rows_read);

    cols_c_U : component colordetect_accel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => colordetect_accel_entry31_U0_cols_out_din,
        if_full_n => cols_c_full_n,
        if_write => colordetect_accel_entry31_U0_cols_out_write,
        if_dout => cols_c_dout,
        if_empty_n => cols_c_empty_n,
        if_read => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_cols_read);

    t1_c_U : component colordetect_accel_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => colordetect_accel_entry31_U0_t1_out_din,
        if_full_n => t1_c_full_n,
        if_write => colordetect_accel_entry31_U0_t1_out_write,
        if_dout => t1_c_dout,
        if_empty_n => t1_c_empty_n,
        if_read => Block_split5_proc_U0_t1_read);

    imgInput_rows_c_U : component colordetect_accel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_rows_out_din,
        if_full_n => imgInput_rows_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_rows_out_write,
        if_dout => imgInput_rows_c_dout,
        if_empty_n => imgInput_rows_c_empty_n,
        if_read => axis2xfMat_24_9_2160_3840_1_U0_img_rows_read);

    imgInput_cols_c_U : component colordetect_accel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_cols_out_din,
        if_full_n => imgInput_cols_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgInput_cols_out_write,
        if_dout => imgInput_cols_c_dout,
        if_empty_n => imgInput_cols_c_empty_n,
        if_read => axis2xfMat_24_9_2160_3840_1_U0_img_cols_read);

    rgb2hsv_rows_c_U : component colordetect_accel_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_rows_out_din,
        if_full_n => rgb2hsv_rows_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_rows_out_write,
        if_dout => rgb2hsv_rows_c_dout,
        if_empty_n => rgb2hsv_rows_c_empty_n,
        if_read => colorthresholding_9_0_3_2160_3840_1_U0_p_src_mat_rows_read);

    rgb2hsv_cols_c_U : component colordetect_accel_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_cols_out_din,
        if_full_n => rgb2hsv_cols_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_rgb2hsv_cols_out_write,
        if_dout => rgb2hsv_cols_c_dout,
        if_empty_n => rgb2hsv_cols_c_empty_n,
        if_read => colorthresholding_9_0_3_2160_3840_1_U0_p_src_mat_cols_read);

    imgHelper1_rows_c_U : component colordetect_accel_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_rows_out_din,
        if_full_n => imgHelper1_rows_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_rows_out_write,
        if_dout => imgHelper1_rows_c_dout,
        if_empty_n => imgHelper1_rows_c_empty_n,
        if_read => erode_0_0_2160_3840_0_3_3_1_1_25_U0_p_src_rows_read);

    imgHelper1_cols_c_U : component colordetect_accel_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_cols_out_din,
        if_full_n => imgHelper1_cols_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper1_cols_out_write,
        if_dout => imgHelper1_cols_c_dout,
        if_empty_n => imgHelper1_cols_c_empty_n,
        if_read => erode_0_0_2160_3840_0_3_3_1_1_25_U0_p_src_cols_read);

    imgHelper2_rows_c_U : component colordetect_accel_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_rows_out_din,
        if_full_n => imgHelper2_rows_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_rows_out_write,
        if_dout => imgHelper2_rows_c_dout,
        if_empty_n => imgHelper2_rows_c_empty_n,
        if_read => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_p_src_rows_read);

    imgHelper2_cols_c_U : component colordetect_accel_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_cols_out_din,
        if_full_n => imgHelper2_cols_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper2_cols_out_write,
        if_dout => imgHelper2_cols_c_dout,
        if_empty_n => imgHelper2_cols_c_empty_n,
        if_read => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_p_src_cols_read);

    imgHelper3_rows_c_U : component colordetect_accel_fifo_w32_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_rows_out_din,
        if_full_n => imgHelper3_rows_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_rows_out_write,
        if_dout => imgHelper3_rows_c_dout,
        if_empty_n => imgHelper3_rows_c_empty_n,
        if_read => dilate_0_0_2160_3840_0_3_3_1_1_U0_p_src_rows_read);

    imgHelper3_cols_c_U : component colordetect_accel_fifo_w32_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_cols_out_din,
        if_full_n => imgHelper3_cols_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper3_cols_out_write,
        if_dout => imgHelper3_cols_c_dout,
        if_empty_n => imgHelper3_cols_c_empty_n,
        if_read => dilate_0_0_2160_3840_0_3_3_1_1_U0_p_src_cols_read);

    imgHelper4_rows_c_U : component colordetect_accel_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_rows_out_din,
        if_full_n => imgHelper4_rows_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_rows_out_write,
        if_dout => imgHelper4_rows_c_dout,
        if_empty_n => imgHelper4_rows_c_empty_n,
        if_read => erode_0_0_2160_3840_0_3_3_1_1_U0_p_src_rows_read);

    imgHelper4_cols_c_U : component colordetect_accel_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_cols_out_din,
        if_full_n => imgHelper4_cols_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgHelper4_cols_out_write,
        if_dout => imgHelper4_cols_c_dout,
        if_empty_n => imgHelper4_cols_c_empty_n,
        if_read => erode_0_0_2160_3840_0_3_3_1_1_U0_p_src_cols_read);

    imgOutput_rows_c_U : component colordetect_accel_fifo_w32_d9_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_rows_out_din,
        if_full_n => imgOutput_rows_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_rows_out_write,
        if_dout => imgOutput_rows_c_dout,
        if_empty_n => imgOutput_rows_c_empty_n,
        if_read => xfMat2axis_24_0_2160_3840_1_U0_img_rows_read);

    imgOutput_cols_c_U : component colordetect_accel_fifo_w32_d9_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_cols_out_din,
        if_full_n => imgOutput_cols_c_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_imgOutput_cols_out_write,
        if_dout => imgOutput_cols_c_dout,
        if_empty_n => imgOutput_cols_c_empty_n,
        if_read => xfMat2axis_24_0_2160_3840_1_U0_img_cols_read);

    imgInput_data_U : component colordetect_accel_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => axis2xfMat_24_9_2160_3840_1_U0_imgInput_499_din,
        if_full_n => imgInput_data_full_n,
        if_write => axis2xfMat_24_9_2160_3840_1_U0_imgInput_499_write,
        if_dout => imgInput_data_dout,
        if_empty_n => imgInput_data_empty_n,
        if_read => bgr2hsv_9_2160_3840_1_U0_imgInput_499_read);

    imgInput_rows_c22_U : component colordetect_accel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => axis2xfMat_24_9_2160_3840_1_U0_img_rows_out_din,
        if_full_n => imgInput_rows_c22_full_n,
        if_write => axis2xfMat_24_9_2160_3840_1_U0_img_rows_out_write,
        if_dout => imgInput_rows_c22_dout,
        if_empty_n => imgInput_rows_c22_empty_n,
        if_read => bgr2hsv_9_2160_3840_1_U0_p_src_mat_rows_read);

    imgInput_cols_c23_U : component colordetect_accel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => axis2xfMat_24_9_2160_3840_1_U0_img_cols_out_din,
        if_full_n => imgInput_cols_c23_full_n,
        if_write => axis2xfMat_24_9_2160_3840_1_U0_img_cols_out_write,
        if_dout => imgInput_cols_c23_dout,
        if_empty_n => imgInput_cols_c23_empty_n,
        if_read => bgr2hsv_9_2160_3840_1_U0_p_src_mat_cols_read);

    rgb2hsv_data_U : component colordetect_accel_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => bgr2hsv_9_2160_3840_1_U0_rgb2hsv_4100_din,
        if_full_n => rgb2hsv_data_full_n,
        if_write => bgr2hsv_9_2160_3840_1_U0_rgb2hsv_4100_write,
        if_dout => rgb2hsv_data_dout,
        if_empty_n => rgb2hsv_data_empty_n,
        if_read => colorthresholding_9_0_3_2160_3840_1_U0_rgb2hsv_4100_read);

    imgHelper1_data_U : component colordetect_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => colorthresholding_9_0_3_2160_3840_1_U0_imgHelper1_4101_din,
        if_full_n => imgHelper1_data_full_n,
        if_write => colorthresholding_9_0_3_2160_3840_1_U0_imgHelper1_4101_write,
        if_dout => imgHelper1_data_dout,
        if_empty_n => imgHelper1_data_empty_n,
        if_read => erode_0_0_2160_3840_0_3_3_1_1_25_U0_imgHelper1_4101_read);

    imgHelper2_data_U : component colordetect_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => erode_0_0_2160_3840_0_3_3_1_1_25_U0_imgHelper2_4102_din,
        if_full_n => imgHelper2_data_full_n,
        if_write => erode_0_0_2160_3840_0_3_3_1_1_25_U0_imgHelper2_4102_write,
        if_dout => imgHelper2_data_dout,
        if_empty_n => imgHelper2_data_empty_n,
        if_read => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_imgHelper2_4102_read);

    imgHelper3_data_U : component colordetect_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_imgHelper3_4103_din,
        if_full_n => imgHelper3_data_full_n,
        if_write => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_imgHelper3_4103_write,
        if_dout => imgHelper3_data_dout,
        if_empty_n => imgHelper3_data_empty_n,
        if_read => dilate_0_0_2160_3840_0_3_3_1_1_U0_imgHelper2_4102_read);

    imgHelper4_data_U : component colordetect_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dilate_0_0_2160_3840_0_3_3_1_1_U0_imgHelper3_4103_din,
        if_full_n => imgHelper4_data_full_n,
        if_write => dilate_0_0_2160_3840_0_3_3_1_1_U0_imgHelper3_4103_write,
        if_dout => imgHelper4_data_dout,
        if_empty_n => imgHelper4_data_empty_n,
        if_read => erode_0_0_2160_3840_0_3_3_1_1_U0_imgHelper1_4101_read);

    imgOutput_data_U : component colordetect_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => erode_0_0_2160_3840_0_3_3_1_1_U0_imgHelper2_4102_din,
        if_full_n => imgOutput_data_full_n,
        if_write => erode_0_0_2160_3840_0_3_3_1_1_U0_imgHelper2_4102_write,
        if_dout => imgOutput_data_dout,
        if_empty_n => imgOutput_data_empty_n,
        if_read => xfMat2axis_24_0_2160_3840_1_U0_imgOutput_4105_read);

    start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_U : component colordetect_accel_start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_din,
        if_full_n => start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_full_n,
        if_write => colordetect_accel_entry31_U0_start_write,
        if_dout => start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_dout,
        if_empty_n => start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_empty_n,
        if_read => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_ready);

    start_for_axis2xfMat_24_9_2160_3840_1_U0_U : component colordetect_accel_start_for_axis2xfMat_24_9_2160_3840_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_axis2xfMat_24_9_2160_3840_1_U0_din,
        if_full_n => start_for_axis2xfMat_24_9_2160_3840_1_U0_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_write,
        if_dout => start_for_axis2xfMat_24_9_2160_3840_1_U0_dout,
        if_empty_n => start_for_axis2xfMat_24_9_2160_3840_1_U0_empty_n,
        if_read => axis2xfMat_24_9_2160_3840_1_U0_ap_ready);

    start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_U : component colordetect_accel_start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_din,
        if_full_n => start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_write,
        if_dout => start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_dout,
        if_empty_n => start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_empty_n,
        if_read => erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_ready);

    start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_U : component colordetect_accel_start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_din,
        if_full_n => start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_write,
        if_dout => start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_dout,
        if_empty_n => start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_empty_n,
        if_read => dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_ready);

    start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_U : component colordetect_accel_start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_din,
        if_full_n => start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_write,
        if_dout => start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_dout,
        if_empty_n => start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_empty_n,
        if_read => dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_ready);

    start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_U : component colordetect_accel_start_for_erode_0_0_2160_3840_0_3_3_1_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_din,
        if_full_n => start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_write,
        if_dout => start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_dout,
        if_empty_n => start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_empty_n,
        if_read => erode_0_0_2160_3840_0_3_3_1_1_U0_ap_ready);

    start_for_xfMat2axis_24_0_2160_3840_1_U0_U : component colordetect_accel_start_for_xfMat2axis_24_0_2160_3840_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xfMat2axis_24_0_2160_3840_1_U0_din,
        if_full_n => start_for_xfMat2axis_24_0_2160_3840_1_U0_full_n,
        if_write => Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_write,
        if_dout => start_for_xfMat2axis_24_0_2160_3840_1_U0_dout,
        if_empty_n => start_for_xfMat2axis_24_0_2160_3840_1_U0_empty_n,
        if_read => xfMat2axis_24_0_2160_3840_1_U0_ap_ready);

    start_for_bgr2hsv_9_2160_3840_1_U0_U : component colordetect_accel_start_for_bgr2hsv_9_2160_3840_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_bgr2hsv_9_2160_3840_1_U0_din,
        if_full_n => start_for_bgr2hsv_9_2160_3840_1_U0_full_n,
        if_write => axis2xfMat_24_9_2160_3840_1_U0_start_write,
        if_dout => start_for_bgr2hsv_9_2160_3840_1_U0_dout,
        if_empty_n => start_for_bgr2hsv_9_2160_3840_1_U0_empty_n,
        if_read => bgr2hsv_9_2160_3840_1_U0_ap_ready);





    ap_sync_reg_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready <= ap_sync_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_high_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_high <= ap_const_logic_0;
            else
                if (((Loop_VITIS_LOOP_184_2_proc_U0_ap_done and Loop_VITIS_LOOP_184_2_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_high <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_high <= ap_sync_channel_write_high;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_high_t_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_high_t <= ap_const_logic_0;
            else
                if (((Loop_VITIS_LOOP_184_2_proc_U0_ap_done and Loop_VITIS_LOOP_184_2_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_high_t <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_high_t <= ap_sync_channel_write_high_t;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_low_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_low <= ap_const_logic_0;
            else
                if (((Loop_VITIS_LOOP_184_2_proc_U0_ap_done and Loop_VITIS_LOOP_184_2_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_low <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_low <= ap_sync_channel_write_low;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_low_t_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_low_t <= ap_const_logic_0;
            else
                if (((Loop_VITIS_LOOP_184_2_proc_U0_ap_done and Loop_VITIS_LOOP_184_2_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_low_t <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_low_t <= ap_sync_channel_write_low_t;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_colordetect_accel_entry31_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_colordetect_accel_entry31_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_colordetect_accel_entry31_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_colordetect_accel_entry31_U0_ap_ready <= ap_sync_colordetect_accel_entry31_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_continue <= ap_const_logic_1;
    Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_start <= start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_empty_n;
    Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_start_full_n <= (start_for_xfMat2axis_24_0_2160_3840_1_U0_full_n and start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_full_n and start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_full_n and start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_full_n and start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_full_n and start_for_axis2xfMat_24_9_2160_3840_1_U0_full_n);
    Block_split5_proc_U0_ap_continue <= ap_sync_done;
    Block_split5_proc_U0_ap_start <= (low_t_t_empty_n and high_t_t_empty_n);
    Block_split5_proc_U0_start_full_n <= ap_const_logic_1;
    Block_split5_proc_U0_start_write <= ap_const_logic_0;
    Loop_VITIS_LOOP_184_2_proc_U0_ap_continue <= (ap_sync_channel_write_low_t and ap_sync_channel_write_low and ap_sync_channel_write_high_t and ap_sync_channel_write_high);
    Loop_VITIS_LOOP_184_2_proc_U0_ap_start <= ((ap_sync_reg_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_VITIS_LOOP_184_2_proc_U0_high_r_full_n <= high_i_full_n;
    Loop_VITIS_LOOP_184_2_proc_U0_high_t_full_n <= high_t_i_full_n;
    Loop_VITIS_LOOP_184_2_proc_U0_low_r_full_n <= low_i_full_n;
    Loop_VITIS_LOOP_184_2_proc_U0_low_t_full_n <= low_t_i_full_n;
    Loop_VITIS_LOOP_184_2_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_VITIS_LOOP_184_2_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_high <= ((ap_sync_reg_channel_write_high xor ap_const_logic_1) and Loop_VITIS_LOOP_184_2_proc_U0_ap_done);
    ap_channel_done_high_t <= ((ap_sync_reg_channel_write_high_t xor ap_const_logic_1) and Loop_VITIS_LOOP_184_2_proc_U0_ap_done);
    ap_channel_done_low <= ((ap_sync_reg_channel_write_low xor ap_const_logic_1) and Loop_VITIS_LOOP_184_2_proc_U0_ap_done);
    ap_channel_done_low_t <= ((ap_sync_reg_channel_write_low_t xor ap_const_logic_1) and Loop_VITIS_LOOP_184_2_proc_U0_ap_done);
    ap_done <= ap_sync_done;
    ap_idle <= (xfMat2axis_24_0_2160_3840_1_U0_ap_idle and (high_t_t_empty_n xor ap_const_logic_1) and (high_t_empty_n xor ap_const_logic_1) and (low_t_t_empty_n xor ap_const_logic_1) and (low_t_empty_n xor ap_const_logic_1) and erode_0_0_2160_3840_0_3_3_1_1_U0_ap_idle and erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_idle and dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_idle and dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_idle and colorthresholding_9_0_3_2160_3840_1_U0_ap_idle and colordetect_accel_entry31_U0_ap_idle and bgr2hsv_9_2160_3840_1_U0_ap_idle and axis2xfMat_24_9_2160_3840_1_U0_ap_idle and Loop_VITIS_LOOP_184_2_proc_U0_ap_idle and Block_split5_proc_U0_ap_idle and Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready <= (ap_sync_reg_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready or Loop_VITIS_LOOP_184_2_proc_U0_ap_ready);
    ap_sync_channel_write_high <= ((ap_channel_done_high and Loop_VITIS_LOOP_184_2_proc_U0_high_r_full_n) or ap_sync_reg_channel_write_high);
    ap_sync_channel_write_high_t <= ((ap_channel_done_high_t and Loop_VITIS_LOOP_184_2_proc_U0_high_t_full_n) or ap_sync_reg_channel_write_high_t);
    ap_sync_channel_write_low <= ((ap_channel_done_low and Loop_VITIS_LOOP_184_2_proc_U0_low_r_full_n) or ap_sync_reg_channel_write_low);
    ap_sync_channel_write_low_t <= ((ap_channel_done_low_t and Loop_VITIS_LOOP_184_2_proc_U0_low_t_full_n) or ap_sync_reg_channel_write_low_t);
    ap_sync_colordetect_accel_entry31_U0_ap_ready <= (colordetect_accel_entry31_U0_ap_ready or ap_sync_reg_colordetect_accel_entry31_U0_ap_ready);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (xfMat2axis_24_0_2160_3840_1_U0_ap_done and Block_split5_proc_U0_ap_done);
    ap_sync_ready <= (ap_sync_colordetect_accel_entry31_U0_ap_ready and ap_sync_Loop_VITIS_LOOP_184_2_proc_U0_ap_ready);
    axis2xfMat_24_9_2160_3840_1_U0_ap_continue <= ap_const_logic_1;
    axis2xfMat_24_9_2160_3840_1_U0_ap_start <= start_for_axis2xfMat_24_9_2160_3840_1_U0_empty_n;
    bgr2hsv_9_2160_3840_1_U0_ap_continue <= ap_const_logic_1;
    bgr2hsv_9_2160_3840_1_U0_ap_start <= start_for_bgr2hsv_9_2160_3840_1_U0_empty_n;
    bgr2hsv_9_2160_3840_1_U0_start_full_n <= ap_const_logic_1;
    bgr2hsv_9_2160_3840_1_U0_start_write <= ap_const_logic_0;
    colordetect_accel_entry31_U0_ap_continue <= ap_const_logic_1;
    colordetect_accel_entry31_U0_ap_start <= ((ap_sync_reg_colordetect_accel_entry31_U0_ap_ready xor ap_const_logic_1) and ap_start);
    colorthresholding_9_0_3_2160_3840_1_U0_ap_continue <= ap_const_logic_1;
    colorthresholding_9_0_3_2160_3840_1_U0_ap_start <= (low_t_empty_n and high_t_empty_n);
    colorthresholding_9_0_3_2160_3840_1_U0_start_full_n <= ap_const_logic_1;
    colorthresholding_9_0_3_2160_3840_1_U0_start_write <= ap_const_logic_0;
    dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_continue <= ap_const_logic_1;
    dilate_0_0_2160_3840_0_3_3_1_1_26_U0_ap_start <= start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_empty_n;
    dilate_0_0_2160_3840_0_3_3_1_1_26_U0_start_full_n <= ap_const_logic_1;
    dilate_0_0_2160_3840_0_3_3_1_1_26_U0_start_write <= ap_const_logic_0;
    dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_continue <= ap_const_logic_1;
    dilate_0_0_2160_3840_0_3_3_1_1_U0_ap_start <= start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_empty_n;
    dilate_0_0_2160_3840_0_3_3_1_1_U0_start_full_n <= ap_const_logic_1;
    dilate_0_0_2160_3840_0_3_3_1_1_U0_start_write <= ap_const_logic_0;
    dst_TDATA <= xfMat2axis_24_0_2160_3840_1_U0_dst_TDATA;
    dst_TDEST <= xfMat2axis_24_0_2160_3840_1_U0_dst_TDEST;
    dst_TID <= xfMat2axis_24_0_2160_3840_1_U0_dst_TID;
    dst_TKEEP <= xfMat2axis_24_0_2160_3840_1_U0_dst_TKEEP;
    dst_TLAST <= xfMat2axis_24_0_2160_3840_1_U0_dst_TLAST;
    dst_TSTRB <= xfMat2axis_24_0_2160_3840_1_U0_dst_TSTRB;
    dst_TUSER <= xfMat2axis_24_0_2160_3840_1_U0_dst_TUSER;
    dst_TVALID <= xfMat2axis_24_0_2160_3840_1_U0_dst_TVALID;
    erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_continue <= ap_const_logic_1;
    erode_0_0_2160_3840_0_3_3_1_1_25_U0_ap_start <= start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_empty_n;
    erode_0_0_2160_3840_0_3_3_1_1_25_U0_start_full_n <= ap_const_logic_1;
    erode_0_0_2160_3840_0_3_3_1_1_25_U0_start_write <= ap_const_logic_0;
    erode_0_0_2160_3840_0_3_3_1_1_U0_ap_continue <= ap_const_logic_1;
    erode_0_0_2160_3840_0_3_3_1_1_U0_ap_start <= start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_empty_n;
    erode_0_0_2160_3840_0_3_3_1_1_U0_start_full_n <= ap_const_logic_1;
    erode_0_0_2160_3840_0_3_3_1_1_U0_start_write <= ap_const_logic_0;
    high_t_d1 <= ap_const_lv8_0;
    high_t_we1 <= ap_const_logic_0;
    low_t_d1 <= ap_const_lv8_0;
    low_t_we1 <= ap_const_logic_0;
    src_TREADY <= axis2xfMat_24_9_2160_3840_1_U0_src_TREADY;
    start_for_Block_ZN2xf2cv3MatILi9ELi2160ELi3840ELi1ELi2EEC2Eii_exit2_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_axis2xfMat_24_9_2160_3840_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_bgr2hsv_9_2160_3840_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_dilate_0_0_2160_3840_0_3_3_1_1_26_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_dilate_0_0_2160_3840_0_3_3_1_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_erode_0_0_2160_3840_0_3_3_1_1_25_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_erode_0_0_2160_3840_0_3_3_1_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xfMat2axis_24_0_2160_3840_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xfMat2axis_24_0_2160_3840_1_U0_ap_continue <= ap_sync_done;
    xfMat2axis_24_0_2160_3840_1_U0_ap_start <= start_for_xfMat2axis_24_0_2160_3840_1_U0_empty_n;
    xfMat2axis_24_0_2160_3840_1_U0_start_full_n <= ap_const_logic_1;
    xfMat2axis_24_0_2160_3840_1_U0_start_write <= ap_const_logic_0;
end behav;
