-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity colordetect_accel_Block_split5_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    t1_empty_n : IN STD_LOGIC;
    t1_read : OUT STD_LOGIC;
    low_t_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    low_t_ce0 : OUT STD_LOGIC;
    low_t_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    high_t_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    high_t_ce0 : OUT STD_LOGIC;
    high_t_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    t2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    t2_ap_vld : OUT STD_LOGIC );
end;


architecture behav of colordetect_accel_Block_split5_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t1_blk_n : STD_LOGIC;
    signal icmp_ln210_fu_69_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln210_reg_93 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxprom21_i_fu_75_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln213_fu_88_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln210_fu_81_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    t2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                t2_preg(0) <= '0';
                t2_preg(1) <= '0';
                t2_preg(2) <= '0';
                t2_preg(3) <= '0';
                t2_preg(4) <= '0';
                t2_preg(5) <= '0';
                t2_preg(6) <= '0';
                t2_preg(7) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                                        t2_preg(7 downto 0) <= zext_ln213_fu_88_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln210_reg_93 <= icmp_ln210_fu_69_p2;
            end if;
        end if;
    end process;
    t2_preg(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, t1_empty_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (t1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, t1_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (t1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    high_t_address0 <= idxprom21_i_fu_75_p1(4 - 1 downto 0);

    high_t_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, t1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (t1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            high_t_ce0 <= ap_const_logic_1;
        else 
            high_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln210_fu_69_p2 <= "1" when (signed(t1_dout) < signed(ap_const_lv32_9)) else "0";
    idxprom21_i_fu_75_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_dout),64));
    low_t_address0 <= idxprom21_i_fu_75_p1(4 - 1 downto 0);

    low_t_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, t1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (t1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            low_t_ce0 <= ap_const_logic_1;
        else 
            low_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln210_fu_81_p3 <= 
        low_t_q0 when (icmp_ln210_reg_93(0) = '1') else 
        high_t_q0;

    t1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, t1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            t1_blk_n <= t1_empty_n;
        else 
            t1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    t1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, t1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (t1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            t1_read <= ap_const_logic_1;
        else 
            t1_read <= ap_const_logic_0;
        end if; 
    end process;


    t2_assign_proc : process(zext_ln213_fu_88_p1, t2_preg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t2 <= zext_ln213_fu_88_p1;
        else 
            t2 <= t2_preg;
        end if; 
    end process;


    t2_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t2_ap_vld <= ap_const_logic_1;
        else 
            t2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln213_fu_88_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln210_fu_81_p3),32));
end behav;
