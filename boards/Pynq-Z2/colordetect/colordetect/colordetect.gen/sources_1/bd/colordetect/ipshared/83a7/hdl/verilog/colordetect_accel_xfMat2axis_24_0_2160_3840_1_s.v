// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module colordetect_accel_xfMat2axis_24_0_2160_3840_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imgOutput_4105_dout,
        imgOutput_4105_empty_n,
        imgOutput_4105_read,
        img_rows_dout,
        img_rows_empty_n,
        img_rows_read,
        img_cols_dout,
        img_cols_empty_n,
        img_cols_read,
        dst_TDATA,
        dst_TVALID,
        dst_TREADY,
        dst_TKEEP,
        dst_TSTRB,
        dst_TUSER,
        dst_TLAST,
        dst_TID,
        dst_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] imgOutput_4105_dout;
input   imgOutput_4105_empty_n;
output   imgOutput_4105_read;
input  [31:0] img_rows_dout;
input   img_rows_empty_n;
output   img_rows_read;
input  [31:0] img_cols_dout;
input   img_cols_empty_n;
output   img_cols_read;
output  [23:0] dst_TDATA;
output   dst_TVALID;
input   dst_TREADY;
output  [2:0] dst_TKEEP;
output  [2:0] dst_TSTRB;
output  [0:0] dst_TUSER;
output  [0:0] dst_TLAST;
output  [0:0] dst_TID;
output  [0:0] dst_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgOutput_4105_read;
reg img_rows_read;
reg img_cols_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    imgOutput_4105_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln107_reg_249;
reg    img_rows_blk_n;
reg    img_cols_blk_n;
reg    dst_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln107_reg_249_pp0_iter1_reg;
reg   [11:0] j_reg_137;
reg   [31:0] rows_reg_210;
reg   [31:0] cols_reg_215;
wire   [31:0] sub_i_fu_148_p2;
reg   [31:0] sub_i_reg_220;
wire   [31:0] sub9_i_fu_154_p2;
reg   [31:0] sub9_i_reg_225;
wire   [11:0] i_1_fu_160_p2;
reg   [11:0] i_1_reg_230;
wire    ap_CS_fsm_state2;
wire    regslice_both_dst_V_data_V_U_apdone_blk;
wire   [0:0] icmp_ln105_fu_170_p2;
wire   [0:0] icmp_ln112_fu_175_p2;
reg   [0:0] icmp_ln112_reg_239;
wire   [11:0] j_1_fu_180_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln107_fu_190_p2;
wire   [0:0] axi_last_V_fu_200_p2;
reg   [0:0] axi_last_V_reg_253;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [11:0] i_reg_126;
wire    ap_CS_fsm_state6;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln105_fu_166_p1;
wire   [31:0] zext_ln107_fu_186_p1;
wire   [0:0] icmp_ln112_1_fu_195_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] dst_TDATA_int_regslice;
reg    dst_TVALID_int_regslice;
wire    dst_TREADY_int_regslice;
wire    regslice_both_dst_V_data_V_U_vld_out;
wire    regslice_both_dst_V_keep_V_U_apdone_blk;
wire    regslice_both_dst_V_keep_V_U_ack_in_dummy;
wire    regslice_both_dst_V_keep_V_U_vld_out;
wire    regslice_both_dst_V_strb_V_U_apdone_blk;
wire    regslice_both_dst_V_strb_V_U_ack_in_dummy;
wire    regslice_both_dst_V_strb_V_U_vld_out;
wire    regslice_both_dst_V_user_V_U_apdone_blk;
wire    regslice_both_dst_V_user_V_U_ack_in_dummy;
wire    regslice_both_dst_V_user_V_U_vld_out;
wire    regslice_both_dst_V_last_V_U_apdone_blk;
wire    regslice_both_dst_V_last_V_U_ack_in_dummy;
wire    regslice_both_dst_V_last_V_U_vld_out;
wire    regslice_both_dst_V_id_V_U_apdone_blk;
wire    regslice_both_dst_V_id_V_U_ack_in_dummy;
wire    regslice_both_dst_V_id_V_U_vld_out;
wire    regslice_both_dst_V_dest_V_U_apdone_blk;
wire    regslice_both_dst_V_dest_V_U_ack_in_dummy;
wire    regslice_both_dst_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

colordetect_accel_regslice_both #(
    .DataWidth( 24 ))
regslice_both_dst_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(dst_TDATA_int_regslice),
    .vld_in(dst_TVALID_int_regslice),
    .ack_in(dst_TREADY_int_regslice),
    .data_out(dst_TDATA),
    .vld_out(regslice_both_dst_V_data_V_U_vld_out),
    .ack_out(dst_TREADY),
    .apdone_blk(regslice_both_dst_V_data_V_U_apdone_blk)
);

colordetect_accel_regslice_both #(
    .DataWidth( 3 ))
regslice_both_dst_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(3'd7),
    .vld_in(dst_TVALID_int_regslice),
    .ack_in(regslice_both_dst_V_keep_V_U_ack_in_dummy),
    .data_out(dst_TKEEP),
    .vld_out(regslice_both_dst_V_keep_V_U_vld_out),
    .ack_out(dst_TREADY),
    .apdone_blk(regslice_both_dst_V_keep_V_U_apdone_blk)
);

colordetect_accel_regslice_both #(
    .DataWidth( 3 ))
regslice_both_dst_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(3'd0),
    .vld_in(dst_TVALID_int_regslice),
    .ack_in(regslice_both_dst_V_strb_V_U_ack_in_dummy),
    .data_out(dst_TSTRB),
    .vld_out(regslice_both_dst_V_strb_V_U_vld_out),
    .ack_out(dst_TREADY),
    .apdone_blk(regslice_both_dst_V_strb_V_U_apdone_blk)
);

colordetect_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_dst_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(dst_TVALID_int_regslice),
    .ack_in(regslice_both_dst_V_user_V_U_ack_in_dummy),
    .data_out(dst_TUSER),
    .vld_out(regslice_both_dst_V_user_V_U_vld_out),
    .ack_out(dst_TREADY),
    .apdone_blk(regslice_both_dst_V_user_V_U_apdone_blk)
);

colordetect_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_dst_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(axi_last_V_reg_253),
    .vld_in(dst_TVALID_int_regslice),
    .ack_in(regslice_both_dst_V_last_V_U_ack_in_dummy),
    .data_out(dst_TLAST),
    .vld_out(regslice_both_dst_V_last_V_U_vld_out),
    .ack_out(dst_TREADY),
    .apdone_blk(regslice_both_dst_V_last_V_U_apdone_blk)
);

colordetect_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_dst_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(dst_TVALID_int_regslice),
    .ack_in(regslice_both_dst_V_id_V_U_ack_in_dummy),
    .data_out(dst_TID),
    .vld_out(regslice_both_dst_V_id_V_U_vld_out),
    .ack_out(dst_TREADY),
    .apdone_blk(regslice_both_dst_V_id_V_U_apdone_blk)
);

colordetect_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_dst_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(dst_TVALID_int_regslice),
    .ack_in(regslice_both_dst_V_dest_V_U_ack_in_dummy),
    .data_out(dst_TDEST),
    .vld_out(regslice_both_dst_V_dest_V_U_vld_out),
    .ack_out(dst_TREADY),
    .apdone_blk(regslice_both_dst_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_dst_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_170_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((regslice_both_dst_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_170_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((regslice_both_dst_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_170_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_126 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_126 <= i_1_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_fu_190_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_137 <= j_1_fu_180_p2;
    end else if (((regslice_both_dst_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_170_p2 == 1'd1))) begin
        j_reg_137 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_fu_190_p2 == 1'd1))) begin
        axi_last_V_reg_253 <= axi_last_V_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cols_reg_215 <= img_cols_dout;
        rows_reg_210 <= img_rows_dout;
        sub9_i_reg_225 <= sub9_i_fu_154_p2;
        sub_i_reg_220 <= sub_i_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_dst_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_230 <= i_1_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln107_reg_249 <= icmp_ln107_fu_190_p2;
        icmp_ln107_reg_249_pp0_iter1_reg <= icmp_ln107_reg_249;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_170_p2 == 1'd1))) begin
        icmp_ln112_reg_239 <= icmp_ln112_fu_175_p2;
    end
end

always @ (*) begin
    if ((icmp_ln107_fu_190_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_170_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_170_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln107_reg_249_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln107_reg_249 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dst_TDATA_blk_n = dst_TREADY_int_regslice;
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln107_reg_249 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_TVALID_int_regslice = 1'b1;
    end else begin
        dst_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln107_reg_249 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgOutput_4105_blk_n = imgOutput_4105_empty_n;
    end else begin
        imgOutput_4105_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln107_reg_249 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgOutput_4105_read = 1'b1;
    end else begin
        imgOutput_4105_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_blk_n = img_cols_empty_n;
    end else begin
        img_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_read = 1'b1;
    end else begin
        img_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_blk_n = img_rows_empty_n;
    end else begin
        img_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_read = 1'b1;
    end else begin
        img_rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((regslice_both_dst_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_170_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_dst_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln105_fu_170_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln107_fu_190_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln107_fu_190_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln107_reg_249_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (dst_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln107_reg_249 == 1'd1) & (dst_TREADY_int_regslice == 1'b0)) | ((icmp_ln107_reg_249 == 1'd1) & (imgOutput_4105_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((icmp_ln107_reg_249_pp0_iter1_reg == 1'd1) & (dst_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln107_reg_249 == 1'd1) & (dst_TREADY_int_regslice == 1'b0)) | ((icmp_ln107_reg_249 == 1'd1) & (imgOutput_4105_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((icmp_ln107_reg_249_pp0_iter1_reg == 1'd1) & (dst_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln107_reg_249 == 1'd1) & (dst_TREADY_int_regslice == 1'b0)) | ((icmp_ln107_reg_249 == 1'd1) & (imgOutput_4105_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln107_reg_249 == 1'd1) & (dst_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln107_reg_249 == 1'd1) & (dst_TREADY_int_regslice == 1'b0)) | ((icmp_ln107_reg_249 == 1'd1) & (imgOutput_4105_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_io = ((icmp_ln107_reg_249_pp0_iter1_reg == 1'd1) & (dst_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln107_reg_249_pp0_iter1_reg == 1'd1) & (dst_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign axi_last_V_fu_200_p2 = (icmp_ln112_reg_239 & icmp_ln112_1_fu_195_p2);

assign dst_TDATA_int_regslice = imgOutput_4105_dout;

assign dst_TVALID = regslice_both_dst_V_data_V_U_vld_out;

assign i_1_fu_160_p2 = (i_reg_126 + 12'd1);

assign icmp_ln105_fu_170_p2 = (($signed(zext_ln105_fu_166_p1) < $signed(rows_reg_210)) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_190_p2 = (($signed(zext_ln107_fu_186_p1) < $signed(cols_reg_215)) ? 1'b1 : 1'b0);

assign icmp_ln112_1_fu_195_p2 = ((zext_ln107_fu_186_p1 == sub_i_reg_220) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_175_p2 = ((zext_ln105_fu_166_p1 == sub9_i_reg_225) ? 1'b1 : 1'b0);

assign j_1_fu_180_p2 = (j_reg_137 + 12'd1);

assign sub9_i_fu_154_p2 = ($signed(img_rows_dout) + $signed(32'd4294967295));

assign sub_i_fu_148_p2 = ($signed(img_cols_dout) + $signed(32'd4294967295));

assign zext_ln105_fu_166_p1 = i_reg_126;

assign zext_ln107_fu_186_p1 = j_reg_137;

endmodule //colordetect_accel_xfMat2axis_24_0_2160_3840_1_s
