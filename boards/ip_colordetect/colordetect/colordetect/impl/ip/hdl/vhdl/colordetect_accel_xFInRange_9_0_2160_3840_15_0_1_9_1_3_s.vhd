-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity colordetect_accel_xFInRange_9_0_2160_3840_15_0_1_9_1_3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rgb2hsv_4100_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    rgb2hsv_4100_empty_n : IN STD_LOGIC;
    rgb2hsv_4100_read : OUT STD_LOGIC;
    imgHelper1_4101_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgHelper1_4101_full_n : IN STD_LOGIC;
    imgHelper1_4101_write : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of colordetect_accel_xFInRange_9_0_2160_3840_15_0_1_9_1_3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rgb2hsv_4100_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln92_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal imgHelper1_4101_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln92_reg_705_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln92_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln92_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_1_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_1_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_3_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_3_reg_714 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_5_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_5_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_val1_V_fu_259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln56_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_val1_V_1_fu_263_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln890_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_2_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_val1_V_2_fu_273_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln890_1_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_3_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_2_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_3_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_1_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_4_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_1_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_6_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_2_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_4_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_5_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_2_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_6_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_3_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_7_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_6_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_4_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_7_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_2_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_7_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_3_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_9_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_5_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_10_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_8_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_8_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_9_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_4_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_10_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_5_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_11_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_10_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_8_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_11_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_4_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_11_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_5_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_13_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_9_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_14_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1348_12_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1349_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1349_1_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_589_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_589_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_589_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_589_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_589_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component colordetect_accel_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_mul_16ns_16ns_32_4_1_U57 : component colordetect_accel_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_589_p0,
        din1 => grp_fu_589_p1,
        ce => grp_fu_589_ce,
        dout => grp_fu_589_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln92_fu_254_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_229 <= add_ln92_fu_248_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_229 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln1348_1_reg_709 <= and_ln1348_1_fu_373_p2;
                and_ln1348_3_reg_714 <= and_ln1348_3_fu_469_p2;
                and_ln1348_5_reg_719 <= and_ln1348_5_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_695 <= grp_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln92_reg_705 <= icmp_ln92_fu_254_p2;
                icmp_ln92_reg_705_pp0_iter1_reg <= icmp_ln92_reg_705;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, icmp_ln92_fu_254_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln92_fu_254_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln92_fu_254_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln92_fu_248_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_229) + unsigned(ap_const_lv32_1));
    and_ln1348_10_fu_463_p2 <= (xor_ln56_5_fu_395_p2 and and_ln1348_9_fu_457_p2);
    and_ln1348_11_fu_541_p2 <= (xor_ln56_8_fu_480_p2 and xor_ln56_10_fu_513_p2);
    and_ln1348_12_fu_547_p2 <= (xor_ln890_4_fu_502_p2 and and_ln1348_11_fu_541_p2);
    and_ln1348_13_fu_553_p2 <= (xor_ln890_5_fu_524_p2 and xor_ln56_11_fu_535_p2);
    and_ln1348_14_fu_559_p2 <= (xor_ln56_9_fu_491_p2 and and_ln1348_13_fu_553_p2);
    and_ln1348_1_fu_373_p2 <= (and_ln1348_6_fu_367_p2 and and_ln1348_2_fu_355_p2);
    and_ln1348_2_fu_355_p2 <= (xor_ln890_fu_310_p2 and and_ln1348_fu_349_p2);
    and_ln1348_3_fu_469_p2 <= (and_ln1348_8_fu_451_p2 and and_ln1348_10_fu_463_p2);
    and_ln1348_4_fu_361_p2 <= (xor_ln890_1_fu_332_p2 and xor_ln56_3_fu_343_p2);
    and_ln1348_5_fu_565_p2 <= (and_ln1348_14_fu_559_p2 and and_ln1348_12_fu_547_p2);
    and_ln1348_6_fu_367_p2 <= (xor_ln56_1_fu_299_p2 and and_ln1348_4_fu_361_p2);
    and_ln1348_7_fu_445_p2 <= (xor_ln56_6_fu_417_p2 and xor_ln56_4_fu_384_p2);
    and_ln1348_8_fu_451_p2 <= (xor_ln890_2_fu_406_p2 and and_ln1348_7_fu_445_p2);
    and_ln1348_9_fu_457_p2 <= (xor_ln890_3_fu_428_p2 and xor_ln56_7_fu_439_p2);
    and_ln1348_fu_349_p2 <= (xor_ln56_fu_288_p2 and xor_ln56_2_fu_321_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(rgb2hsv_4100_empty_n, imgHelper1_4101_full_n, ap_enable_reg_pp0_iter1, icmp_ln92_reg_705, ap_enable_reg_pp0_iter2, icmp_ln92_reg_705_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln92_reg_705_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (imgHelper1_4101_full_n = ap_const_logic_0)) or ((icmp_ln92_reg_705 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rgb2hsv_4100_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(rgb2hsv_4100_empty_n, imgHelper1_4101_full_n, ap_enable_reg_pp0_iter1, icmp_ln92_reg_705, ap_enable_reg_pp0_iter2, icmp_ln92_reg_705_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln92_reg_705_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (imgHelper1_4101_full_n = ap_const_logic_0)) or ((icmp_ln92_reg_705 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rgb2hsv_4100_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(rgb2hsv_4100_empty_n, imgHelper1_4101_full_n, ap_enable_reg_pp0_iter1, icmp_ln92_reg_705, ap_enable_reg_pp0_iter2, icmp_ln92_reg_705_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln92_reg_705_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (imgHelper1_4101_full_n = ap_const_logic_0)) or ((icmp_ln92_reg_705 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rgb2hsv_4100_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(rgb2hsv_4100_empty_n, icmp_ln92_reg_705)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((icmp_ln92_reg_705 = ap_const_lv1_0) and (rgb2hsv_4100_empty_n = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter2_assign_proc : process(imgHelper1_4101_full_n, icmp_ln92_reg_705_pp0_iter1_reg)
    begin
                ap_block_state7_pp0_stage0_iter2 <= ((icmp_ln92_reg_705_pp0_iter1_reg = ap_const_lv1_0) and (imgHelper1_4101_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln92_fu_254_p2)
    begin
        if ((icmp_ln92_fu_254_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_589_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))))) then 
            grp_fu_589_ce <= ap_const_logic_0;
        else 
            grp_fu_589_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_589_p0 <= grp_fu_589_p00(16 - 1 downto 0);
    grp_fu_589_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read18),32));
    grp_fu_589_p1 <= grp_fu_589_p10(16 - 1 downto 0);
    grp_fu_589_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read19),32));
    icmp_ln56_10_fu_508_p2 <= "1" when (unsigned(tmp_val1_V_1_fu_263_p4) < unsigned(p_read7)) else "0";
    icmp_ln56_11_fu_530_p2 <= "1" when (unsigned(tmp_val1_V_2_fu_273_p4) < unsigned(p_read8)) else "0";
    icmp_ln56_1_fu_294_p2 <= "1" when (unsigned(p_read9) < unsigned(tmp_val1_V_fu_259_p1)) else "0";
    icmp_ln56_2_fu_316_p2 <= "1" when (unsigned(tmp_val1_V_1_fu_263_p4) < unsigned(p_read1)) else "0";
    icmp_ln56_3_fu_338_p2 <= "1" when (unsigned(tmp_val1_V_2_fu_273_p4) < unsigned(p_read2)) else "0";
    icmp_ln56_4_fu_379_p2 <= "1" when (unsigned(tmp_val1_V_fu_259_p1) < unsigned(p_read3)) else "0";
    icmp_ln56_5_fu_390_p2 <= "1" when (unsigned(p_read12) < unsigned(tmp_val1_V_fu_259_p1)) else "0";
    icmp_ln56_6_fu_412_p2 <= "1" when (unsigned(tmp_val1_V_1_fu_263_p4) < unsigned(p_read4)) else "0";
    icmp_ln56_7_fu_434_p2 <= "1" when (unsigned(tmp_val1_V_2_fu_273_p4) < unsigned(p_read5)) else "0";
    icmp_ln56_8_fu_475_p2 <= "1" when (unsigned(tmp_val1_V_fu_259_p1) < unsigned(p_read6)) else "0";
    icmp_ln56_9_fu_486_p2 <= "1" when (unsigned(p_read15) < unsigned(tmp_val1_V_fu_259_p1)) else "0";
    icmp_ln56_fu_283_p2 <= "1" when (unsigned(tmp_val1_V_fu_259_p1) < unsigned(p_read)) else "0";
    icmp_ln890_1_fu_327_p2 <= "1" when (unsigned(p_read11) < unsigned(tmp_val1_V_2_fu_273_p4)) else "0";
    icmp_ln890_2_fu_401_p2 <= "1" when (unsigned(p_read13) < unsigned(tmp_val1_V_1_fu_263_p4)) else "0";
    icmp_ln890_3_fu_423_p2 <= "1" when (unsigned(p_read14) < unsigned(tmp_val1_V_2_fu_273_p4)) else "0";
    icmp_ln890_4_fu_497_p2 <= "1" when (unsigned(p_read16) < unsigned(tmp_val1_V_1_fu_263_p4)) else "0";
    icmp_ln890_5_fu_519_p2 <= "1" when (unsigned(p_read17) < unsigned(tmp_val1_V_2_fu_273_p4)) else "0";
    icmp_ln890_fu_305_p2 <= "1" when (unsigned(p_read10) < unsigned(tmp_val1_V_1_fu_263_p4)) else "0";
    icmp_ln92_fu_254_p2 <= "1" when (indvar_flatten_reg_229 = bound_reg_695) else "0";

    imgHelper1_4101_blk_n_assign_proc : process(imgHelper1_4101_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln92_reg_705_pp0_iter1_reg)
    begin
        if (((icmp_ln92_reg_705_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            imgHelper1_4101_blk_n <= imgHelper1_4101_full_n;
        else 
            imgHelper1_4101_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgHelper1_4101_din <= 
        ap_const_lv8_FF when (or_ln1349_1_fu_575_p2(0) = '1') else 
        ap_const_lv8_0;

    imgHelper1_4101_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln92_reg_705_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln92_reg_705_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            imgHelper1_4101_write <= ap_const_logic_1;
        else 
            imgHelper1_4101_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1349_1_fu_575_p2 <= (or_ln1349_fu_571_p2 or and_ln1348_3_reg_714);
    or_ln1349_fu_571_p2 <= (and_ln1348_5_reg_719 or and_ln1348_1_reg_709);

    rgb2hsv_4100_blk_n_assign_proc : process(rgb2hsv_4100_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln92_reg_705)
    begin
        if (((icmp_ln92_reg_705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rgb2hsv_4100_blk_n <= rgb2hsv_4100_empty_n;
        else 
            rgb2hsv_4100_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rgb2hsv_4100_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln92_reg_705, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln92_reg_705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rgb2hsv_4100_read <= ap_const_logic_1;
        else 
            rgb2hsv_4100_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_val1_V_1_fu_263_p4 <= rgb2hsv_4100_dout(15 downto 8);
    tmp_val1_V_2_fu_273_p4 <= rgb2hsv_4100_dout(23 downto 16);
    tmp_val1_V_fu_259_p1 <= rgb2hsv_4100_dout(8 - 1 downto 0);
    xor_ln56_10_fu_513_p2 <= (icmp_ln56_10_fu_508_p2 xor ap_const_lv1_1);
    xor_ln56_11_fu_535_p2 <= (icmp_ln56_11_fu_530_p2 xor ap_const_lv1_1);
    xor_ln56_1_fu_299_p2 <= (icmp_ln56_1_fu_294_p2 xor ap_const_lv1_1);
    xor_ln56_2_fu_321_p2 <= (icmp_ln56_2_fu_316_p2 xor ap_const_lv1_1);
    xor_ln56_3_fu_343_p2 <= (icmp_ln56_3_fu_338_p2 xor ap_const_lv1_1);
    xor_ln56_4_fu_384_p2 <= (icmp_ln56_4_fu_379_p2 xor ap_const_lv1_1);
    xor_ln56_5_fu_395_p2 <= (icmp_ln56_5_fu_390_p2 xor ap_const_lv1_1);
    xor_ln56_6_fu_417_p2 <= (icmp_ln56_6_fu_412_p2 xor ap_const_lv1_1);
    xor_ln56_7_fu_439_p2 <= (icmp_ln56_7_fu_434_p2 xor ap_const_lv1_1);
    xor_ln56_8_fu_480_p2 <= (icmp_ln56_8_fu_475_p2 xor ap_const_lv1_1);
    xor_ln56_9_fu_491_p2 <= (icmp_ln56_9_fu_486_p2 xor ap_const_lv1_1);
    xor_ln56_fu_288_p2 <= (icmp_ln56_fu_283_p2 xor ap_const_lv1_1);
    xor_ln890_1_fu_332_p2 <= (icmp_ln890_1_fu_327_p2 xor ap_const_lv1_1);
    xor_ln890_2_fu_406_p2 <= (icmp_ln890_2_fu_401_p2 xor ap_const_lv1_1);
    xor_ln890_3_fu_428_p2 <= (icmp_ln890_3_fu_423_p2 xor ap_const_lv1_1);
    xor_ln890_4_fu_502_p2 <= (icmp_ln890_4_fu_497_p2 xor ap_const_lv1_1);
    xor_ln890_5_fu_524_p2 <= (icmp_ln890_5_fu_519_p2 xor ap_const_lv1_1);
    xor_ln890_fu_310_p2 <= (icmp_ln890_fu_305_p2 xor ap_const_lv1_1);
end behav;
